/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.ballerina.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ballerina.psi.BallerinaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Ballerina.flex</tt>
 */
public class BallerinaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4096 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\u01e5\5");

  /* The ZZ_CMAP_Y table has 960 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\16\6\1\10\13\6\1\10\3\6"+
    "\1\7\2\6\1\10\15\6\1\7\113\6\1\7\6\6\1\10\143\6\1\17\1\20");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\4\2\3\1\4\22\0\1\3\1\56\3\0\1\55\1\61\1\0\1\44\1\45\1\53\1\51"+
    "\1\41\1\52\1\40\1\5\12\2\1\0\1\36\1\60\1\37\1\57\1\50\1\63\1\1\1\74\2\1\1"+
    "\66\3\1\1\71\2\1\1\75\1\1\1\73\1\72\2\1\1\67\1\70\2\1\1\65\4\1\1\46\1\0\1"+
    "\47\1\54\1\1\1\64\1\7\1\23\1\10\1\31\1\13\1\27\1\12\1\35\1\14\1\33\1\11\1"+
    "\24\1\15\1\26\1\16\1\6\1\1\1\17\1\21\1\20\1\22\1\25\1\30\1\32\1\34\1\1\1\42"+
    "\1\62\1\43\7\0\1\3\32\0\1\3\77\0\12\2\46\0\12\2\14\0\12\2\20\0\12\2\6\0\12"+
    "\2\6\0\13\3\35\0\2\3\5\0\1\3\57\0\1\3\26\0\12\2\16\0\62\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\21\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\1\1\30\1\31\1\2\1\32\5\2\1\33"+
    "\11\2\1\34\1\35\36\2\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\7\2\1\47\1\2"+
    "\1\50\7\2\1\51\1\2\1\52\5\2\1\53\13\2"+
    "\1\54\12\2\1\55\16\2\1\56\1\57\11\2\1\60"+
    "\2\2\1\61\2\2\1\62\2\2\1\63\1\2\1\64"+
    "\1\2\1\65\2\2\1\66\3\2\1\67\5\2\1\70"+
    "\1\71\6\2\1\72\1\2\1\73\1\74\4\2\1\75"+
    "\3\2\1\76\3\2\1\77\4\2\1\100\6\2\1\101"+
    "\1\2\1\102\1\103\5\2\1\104\1\105\1\106\2\2"+
    "\1\107\1\2\1\110\1\2\1\111\4\2\1\112\1\2"+
    "\1\113\1\114\2\2\1\115\1\116\3\2\1\117\3\2"+
    "\1\120\1\121\3\2\1\122\1\123\1\2\1\124\2\2"+
    "\1\125\1\2\1\126\1\2\1\127\1\130\3\2\1\131"+
    "\2\2\1\132\1\133\3\2\1\134\1\135\3\2\1\136"+
    "\5\2\1\137\2\2\1\140\2\2\1\141\1\142\3\2"+
    "\1\143\3\2\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\76\0\u0554"+
    "\0\u0592\0\76\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\u05d0\0\76\0\76\0\76\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\76\0\76\0\u0744\0\u0782\0\u07c0"+
    "\0\u07fe\0\u083c\0\u087a\0\u08b8\0\174\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\174"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\76\0\76\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\174\0\u1458"+
    "\0\174\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\174\0\u1648\0\174\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\174\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\174\0\u1a66\0\u1aa4\0\u1ae2"+
    "\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2"+
    "\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\174\0\174"+
    "\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\174\0\u235c\0\u239a\0\174"+
    "\0\u23d8\0\u2416\0\174\0\u2454\0\174\0\u2492\0\174\0\u24d0"+
    "\0\u250e\0\174\0\u254c\0\u258a\0\u25c8\0\174\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\174\0\174\0\u273c\0\u277a\0\u27b8"+
    "\0\u27f6\0\u2834\0\u2872\0\174\0\u28b0\0\174\0\174\0\u28ee"+
    "\0\u292c\0\u296a\0\u29a8\0\174\0\u29e6\0\u2a24\0\u2a62\0\174"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\174\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14"+
    "\0\174\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\174"+
    "\0\u2dc6\0\174\0\174\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\174\0\174\0\174\0\u2f3a\0\u2f78\0\174\0\u2fb6\0\174"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\174\0\u3168"+
    "\0\174\0\u31a6\0\u31e4\0\u3222\0\174\0\174\0\u3260\0\u329e"+
    "\0\u32dc\0\174\0\u331a\0\u3358\0\u3396\0\174\0\174\0\u33d4"+
    "\0\u3412\0\u3450\0\174\0\174\0\u348e\0\174\0\u34cc\0\u350a"+
    "\0\174\0\u3548\0\174\0\u3586\0\174\0\174\0\u35c4\0\u3602"+
    "\0\u3640\0\174\0\u367e\0\u36bc\0\174\0\174\0\u36fa\0\u3738"+
    "\0\u3776\0\174\0\174\0\u37b4\0\u37f2\0\u3830\0\174\0\u386e"+
    "\0\u38ac\0\u38ea\0\u3928\0\u3966\0\174\0\u39a4\0\u39e2\0\174"+
    "\0\u3a20\0\u3a5e\0\174\0\174\0\u3a9c\0\u3ada\0\u3b18\0\174"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\2\4\1\5\1\6\1\7\1\10"+
    "\2\3\1\11\1\12\1\13\1\3\1\14\1\15\1\16"+
    "\1\3\1\17\1\20\1\21\1\22\1\23\1\24\1\3"+
    "\1\25\1\26\2\3\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\10\3\77\0\2\3\3\0\30\3"+
    "\27\0\11\3\3\0\2\4\76\0\1\57\71\0\2\3"+
    "\3\0\1\3\1\60\7\3\1\61\2\3\1\62\13\3"+
    "\27\0\11\3\1\0\2\3\3\0\2\3\1\63\7\3"+
    "\1\64\1\65\1\3\1\66\1\67\1\3\1\70\7\3"+
    "\27\0\11\3\1\0\2\3\3\0\1\3\1\71\6\3"+
    "\1\72\1\73\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\16\3\1\74\1\3\1\75\7\3\27\0\11\3\1\0"+
    "\2\3\3\0\7\3\1\76\10\3\1\77\1\100\6\3"+
    "\27\0\11\3\1\0\2\3\3\0\1\3\1\101\26\3"+
    "\27\0\11\3\1\0\2\3\3\0\5\3\1\102\22\3"+
    "\27\0\11\3\1\0\2\3\3\0\1\3\1\103\4\3"+
    "\1\104\2\3\1\105\14\3\1\106\1\107\27\0\11\3"+
    "\1\0\2\3\3\0\5\3\1\110\2\3\1\111\1\3"+
    "\1\112\15\3\27\0\11\3\1\0\2\3\3\0\6\3"+
    "\1\113\1\3\1\114\1\115\4\3\1\116\11\3\27\0"+
    "\11\3\1\0\2\3\3\0\5\3\1\117\2\3\1\120"+
    "\17\3\27\0\11\3\1\0\2\3\3\0\1\3\1\121"+
    "\26\3\27\0\11\3\1\0\2\3\3\0\1\3\1\122"+
    "\3\3\1\123\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\1\3\1\124\4\3\1\125\1\3\1\126\3\3\1\127"+
    "\1\3\1\130\11\3\27\0\11\3\1\0\2\3\3\0"+
    "\6\3\1\131\1\3\1\132\16\3\1\133\27\0\11\3"+
    "\1\0\2\3\3\0\7\3\1\134\20\3\27\0\11\3"+
    "\1\0\2\3\3\0\10\3\1\135\2\3\1\136\14\3"+
    "\27\0\11\3\37\0\1\137\76\0\1\140\114\0\1\141"+
    "\55\0\1\142\75\0\1\143\75\0\1\144\12\0\1\145"+
    "\104\0\1\146\76\0\1\147\14\0\2\3\3\0\30\3"+
    "\27\0\1\3\1\150\7\3\4\57\1\0\71\57\1\0"+
    "\2\3\3\0\2\3\1\151\25\3\27\0\11\3\1\0"+
    "\2\3\3\0\6\3\1\152\21\3\27\0\11\3\1\0"+
    "\2\3\3\0\15\3\1\153\12\3\27\0\11\3\1\0"+
    "\2\3\3\0\12\3\1\154\15\3\27\0\11\3\1\0"+
    "\2\3\3\0\12\3\1\155\15\3\27\0\11\3\1\0"+
    "\2\3\3\0\10\3\1\156\17\3\27\0\11\3\1\0"+
    "\2\3\3\0\16\3\1\157\11\3\27\0\11\3\1\0"+
    "\2\3\3\0\20\3\1\160\5\3\1\161\1\3\27\0"+
    "\11\3\1\0\2\3\3\0\12\3\1\162\15\3\27\0"+
    "\11\3\1\0\2\3\3\0\20\3\1\163\7\3\27\0"+
    "\11\3\1\0\2\3\3\0\5\3\1\164\22\3\27\0"+
    "\11\3\1\0\2\3\3\0\13\3\1\165\14\3\27\0"+
    "\11\3\1\0\2\3\3\0\14\3\1\166\6\3\1\167"+
    "\4\3\27\0\11\3\1\0\2\3\3\0\1\170\27\3"+
    "\27\0\11\3\1\0\2\3\3\0\12\3\1\171\10\3"+
    "\1\172\4\3\27\0\11\3\1\0\2\3\3\0\1\173"+
    "\27\3\27\0\11\3\1\0\2\3\3\0\12\3\1\174"+
    "\1\175\14\3\27\0\11\3\1\0\2\3\3\0\15\3"+
    "\1\176\12\3\27\0\11\3\1\0\2\3\3\0\7\3"+
    "\1\177\20\3\27\0\11\3\1\0\2\3\3\0\1\3"+
    "\1\200\24\3\1\201\1\3\27\0\11\3\1\0\2\3"+
    "\3\0\1\202\27\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\203\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\204\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\7\3\1\205\20\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\206\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\20\3\1\207\7\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\210\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\211\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\212\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\20\3\1\213\7\3\27\0\11\3\1\0\2\3\3\0"+
    "\2\3\1\214\25\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\215\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\216\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\24\3\1\217\3\3\27\0\11\3\1\0\2\3\3\0"+
    "\6\3\1\220\21\3\27\0\11\3\1\0\2\3\3\0"+
    "\20\3\1\221\7\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\222\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\20\3\1\223\7\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\224\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\225\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\226\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\6\3\1\227\21\3\27\0\11\3\1\0\2\3\3\0"+
    "\16\3\1\230\11\3\27\0\11\3\1\0\2\3\3\0"+
    "\6\3\1\231\21\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\232\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\30\3\27\0\2\3\1\233\6\3\1\0\2\3\3\0"+
    "\3\3\1\234\24\3\27\0\11\3\1\0\2\3\3\0"+
    "\17\3\1\235\10\3\27\0\11\3\1\0\2\3\3\0"+
    "\16\3\1\236\11\3\27\0\11\3\1\0\2\3\3\0"+
    "\6\3\1\237\21\3\27\0\11\3\1\0\2\3\3\0"+
    "\1\3\1\240\26\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\241\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\242\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\2\3\1\243\25\3\27\0\11\3\1\0\2\3\3\0"+
    "\13\3\1\244\4\3\1\245\7\3\27\0\11\3\1\0"+
    "\2\3\3\0\1\3\1\246\26\3\27\0\11\3\1\0"+
    "\2\3\3\0\5\3\1\247\22\3\27\0\11\3\1\0"+
    "\2\3\3\0\7\3\1\250\20\3\27\0\11\3\1\0"+
    "\2\3\3\0\1\251\27\3\27\0\11\3\1\0\2\3"+
    "\3\0\10\3\1\252\17\3\27\0\11\3\1\0\2\3"+
    "\3\0\5\3\1\253\22\3\27\0\11\3\1\0\2\3"+
    "\3\0\11\3\1\254\2\3\1\255\13\3\27\0\11\3"+
    "\1\0\2\3\3\0\10\3\1\256\17\3\27\0\11\3"+
    "\1\0\2\3\3\0\16\3\1\257\11\3\27\0\11\3"+
    "\1\0\2\3\3\0\5\3\1\260\22\3\27\0\11\3"+
    "\1\0\2\3\3\0\20\3\1\261\7\3\27\0\11\3"+
    "\1\0\2\3\3\0\5\3\1\262\22\3\27\0\11\3"+
    "\1\0\2\3\3\0\10\3\1\263\17\3\27\0\11\3"+
    "\1\0\2\3\3\0\17\3\1\264\10\3\27\0\11\3"+
    "\1\0\2\3\3\0\5\3\1\265\22\3\27\0\11\3"+
    "\1\0\2\3\3\0\6\3\1\266\5\3\1\267\13\3"+
    "\27\0\11\3\1\0\2\3\3\0\23\3\1\270\4\3"+
    "\27\0\11\3\1\0\2\3\3\0\16\3\1\271\11\3"+
    "\27\0\11\3\1\0\2\3\3\0\1\3\1\272\26\3"+
    "\27\0\11\3\1\0\2\3\3\0\15\3\1\273\12\3"+
    "\27\0\11\3\1\0\2\3\3\0\4\3\1\274\23\3"+
    "\27\0\11\3\1\0\2\3\3\0\3\3\1\275\24\3"+
    "\27\0\11\3\1\0\2\3\3\0\6\3\1\276\21\3"+
    "\27\0\11\3\1\0\2\3\3\0\12\3\1\277\15\3"+
    "\27\0\11\3\1\0\2\3\3\0\16\3\1\300\11\3"+
    "\27\0\11\3\1\0\2\3\3\0\1\3\1\301\26\3"+
    "\27\0\11\3\1\0\2\3\3\0\3\3\1\302\1\3"+
    "\1\303\22\3\27\0\11\3\1\0\2\3\3\0\2\3"+
    "\1\304\25\3\27\0\11\3\1\0\2\3\3\0\1\3"+
    "\1\305\26\3\27\0\11\3\1\0\2\3\3\0\27\3"+
    "\1\306\27\0\11\3\1\0\2\3\3\0\3\3\1\307"+
    "\24\3\27\0\11\3\1\0\2\3\3\0\16\3\1\310"+
    "\11\3\27\0\11\3\1\0\2\3\3\0\20\3\1\311"+
    "\7\3\27\0\6\3\1\312\1\3\1\313\1\0\2\3"+
    "\3\0\20\3\1\314\7\3\27\0\11\3\1\0\2\3"+
    "\3\0\20\3\1\315\7\3\27\0\11\3\1\0\2\3"+
    "\3\0\30\3\27\0\3\3\1\316\5\3\1\0\2\3"+
    "\3\0\1\3\1\317\26\3\27\0\11\3\1\0\2\3"+
    "\3\0\1\3\1\320\26\3\27\0\11\3\1\0\2\3"+
    "\3\0\6\3\1\321\21\3\27\0\11\3\1\0\2\3"+
    "\3\0\10\3\1\322\17\3\27\0\11\3\1\0\2\3"+
    "\3\0\2\3\1\323\25\3\27\0\11\3\1\0\2\3"+
    "\3\0\12\3\1\324\15\3\27\0\11\3\1\0\2\3"+
    "\3\0\12\3\1\325\15\3\27\0\11\3\1\0\2\3"+
    "\3\0\27\3\1\326\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\327\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\330\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\331\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\332\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\333\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\24\3\1\334\3\3\27\0\11\3\1\0\2\3\3\0"+
    "\6\3\1\335\21\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\336\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\14\3\1\337\13\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\340\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\341\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\13\3\1\342\14\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\343\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\22\3\1\344\5\3\27\0\11\3\1\0\2\3\3\0"+
    "\6\3\1\345\21\3\27\0\11\3\1\0\2\3\3\0"+
    "\20\3\1\346\7\3\27\0\11\3\1\0\2\3\3\0"+
    "\2\3\1\347\25\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\350\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\3\3\1\351\24\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\352\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\17\3\1\353\10\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\354\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\16\3\1\355\11\3\27\0\11\3\1\0\2\3\3\0"+
    "\1\3\1\356\26\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\357\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\360\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\361\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\362\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\13\3\1\363\14\3\27\0\11\3\1\0\2\3\3\0"+
    "\1\3\1\364\26\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\365\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\30\3\27\0\4\3\1\366\4\3\1\0\2\3\3\0"+
    "\4\3\1\367\23\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\370\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\2\3\1\371\25\3\27\0\11\3\1\0\2\3\3\0"+
    "\20\3\1\372\7\3\27\0\11\3\1\0\2\3\3\0"+
    "\27\3\1\373\27\0\11\3\1\0\2\3\3\0\1\3"+
    "\1\374\26\3\27\0\11\3\1\0\2\3\3\0\2\3"+
    "\1\375\25\3\27\0\11\3\1\0\2\3\3\0\5\3"+
    "\1\376\22\3\27\0\11\3\1\0\2\3\3\0\6\3"+
    "\1\377\21\3\27\0\11\3\1\0\2\3\3\0\12\3"+
    "\1\u0100\15\3\27\0\11\3\1\0\2\3\3\0\5\3"+
    "\1\u0101\22\3\27\0\11\3\1\0\2\3\3\0\20\3"+
    "\1\u0102\7\3\27\0\11\3\1\0\2\3\3\0\11\3"+
    "\1\u0103\16\3\27\0\11\3\1\0\2\3\3\0\14\3"+
    "\1\u0104\13\3\27\0\11\3\1\0\2\3\3\0\1\3"+
    "\1\u0105\17\3\1\u0106\6\3\27\0\11\3\1\0\2\3"+
    "\3\0\21\3\1\u0107\6\3\27\0\11\3\1\0\2\3"+
    "\3\0\2\3\1\u0108\25\3\27\0\11\3\1\0\2\3"+
    "\3\0\4\3\1\u0109\23\3\27\0\11\3\1\0\2\3"+
    "\3\0\12\3\1\u010a\15\3\27\0\11\3\1\0\2\3"+
    "\3\0\1\3\1\u010b\26\3\27\0\11\3\1\0\2\3"+
    "\3\0\27\3\1\u010c\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\u010d\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\23\3\1\u010e\4\3\27\0\11\3\1\0\2\3\3\0"+
    "\16\3\1\u010f\11\3\27\0\11\3\1\0\2\3\3\0"+
    "\2\3\1\u0110\25\3\27\0\11\3\1\0\2\3\3\0"+
    "\6\3\1\u0111\21\3\27\0\11\3\1\0\2\3\3\0"+
    "\11\3\1\u0112\16\3\27\0\11\3\1\0\2\3\3\0"+
    "\7\3\1\u0113\20\3\27\0\11\3\1\0\2\3\3\0"+
    "\2\3\1\u0114\25\3\27\0\11\3\1\0\2\3\3\0"+
    "\30\3\27\0\5\3\1\u0115\3\3\1\0\2\3\3\0"+
    "\5\3\1\u0116\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\u0117\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\u0118\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\u0119\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\20\3\1\u011a\7\3\27\0\11\3\1\0\2\3\3\0"+
    "\13\3\1\u011b\14\3\27\0\11\3\1\0\2\3\3\0"+
    "\13\3\1\u011c\14\3\27\0\11\3\1\0\2\3\3\0"+
    "\2\3\1\u011d\25\3\27\0\11\3\1\0\2\3\3\0"+
    "\12\3\1\u011e\15\3\27\0\11\3\1\0\2\3\3\0"+
    "\2\3\1\u011f\25\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\u0120\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\5\3\1\u0121\22\3\27\0\11\3\1\0\2\3\3\0"+
    "\30\3\27\0\7\3\1\u0122\1\3\1\0\2\3\3\0"+
    "\20\3\1\u0123\7\3\27\0\11\3\1\0\2\3\3\0"+
    "\10\3\1\u0124\17\3\27\0\11\3\1\0\2\3\3\0"+
    "\26\3\1\u0125\1\3\27\0\11\3\1\0\2\3\3\0"+
    "\27\3\1\u0126\27\0\11\3\1\0\2\3\3\0\10\3"+
    "\1\u0127\17\3\27\0\11\3\1\0\2\3\3\0\5\3"+
    "\1\u0128\22\3\27\0\11\3\1\0\2\3\3\0\1\3"+
    "\1\u0129\26\3\27\0\11\3\1\0\2\3\3\0\30\3"+
    "\27\0\6\3\1\u012a\2\3\1\0\2\3\3\0\6\3"+
    "\1\u012b\21\3\27\0\11\3\1\0\2\3\3\0\10\3"+
    "\1\u012c\17\3\27\0\11\3\1\0\2\3\3\0\12\3"+
    "\1\u012d\15\3\27\0\11\3\1\0\2\3\3\0\5\3"+
    "\1\u012e\22\3\27\0\11\3\1\0\2\3\3\0\12\3"+
    "\1\u012f\15\3\27\0\11\3\1\0\2\3\3\0\11\3"+
    "\1\u0130\16\3\27\0\11\3\1\0\2\3\3\0\10\3"+
    "\1\u0131\17\3\27\0\11\3\1\0\2\3\3\0\21\3"+
    "\1\u0132\6\3\27\0\11\3\1\0\2\3\3\0\20\3"+
    "\1\u0133\7\3\27\0\11\3\1\0\2\3\3\0\13\3"+
    "\1\u0134\14\3\27\0\11\3\1\0\2\3\3\0\16\3"+
    "\1\u0135\11\3\27\0\11\3\1\0\2\3\3\0\10\3"+
    "\1\u0136\17\3\27\0\11\3\1\0\2\3\3\0\11\3"+
    "\1\u0137\16\3\27\0\11\3\1\0\2\3\3\0\6\3"+
    "\1\u0138\21\3\27\0\11\3\1\0\2\3\3\0\7\3"+
    "\1\u0139\20\3\27\0\11\3\1\0\2\3\3\0\23\3"+
    "\1\u013a\4\3\27\0\11\3\1\0\2\3\3\0\1\u013b"+
    "\27\3\27\0\11\3\1\0\2\3\3\0\30\3\27\0"+
    "\6\3\1\u013c\2\3\1\0\2\3\3\0\20\3\1\u013d"+
    "\7\3\27\0\11\3\1\0\2\3\3\0\10\3\1\u013e"+
    "\17\3\27\0\11\3\1\0\2\3\3\0\5\3\1\u013f"+
    "\22\3\27\0\11\3\1\0\2\3\3\0\26\3\1\u0140"+
    "\1\3\27\0\11\3\1\0\2\3\3\0\1\3\1\u0141"+
    "\26\3\27\0\11\3\1\0\2\3\3\0\1\3\1\u0142"+
    "\26\3\27\0\11\3\1\0\2\3\3\0\20\3\1\u0143"+
    "\7\3\27\0\11\3\1\0\2\3\3\0\11\3\1\u0144"+
    "\16\3\27\0\11\3\1\0\2\3\3\0\2\3\1\u0145"+
    "\25\3\27\0\11\3\1\0\2\3\3\0\7\3\1\u0146"+
    "\20\3\27\0\11\3\1\0\2\3\3\0\5\3\1\u0147"+
    "\22\3\27\0\11\3\1\0\2\3\3\0\5\3\1\u0148"+
    "\22\3\27\0\11\3\1\0\2\3\3\0\30\3\27\0"+
    "\6\3\1\u0149\2\3\1\0\2\3\3\0\1\3\1\u014a"+
    "\26\3\27\0\11\3\1\0\2\3\3\0\7\3\1\u014b"+
    "\20\3\27\0\11\3\1\0\2\3\3\0\5\3\1\u014c"+
    "\22\3\27\0\11\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\2\1\11\11\1\1\3\11"+
    "\5\1\2\11\61\1\11\11\345\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public BallerinaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BallerinaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 101: break;
          case 2: 
            { return IDENTIFIER;
            }
          case 102: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 103: break;
          case 4: 
            { return DIV;
            }
          case 104: break;
          case 5: 
            { return SEMICOLON;
            }
          case 105: break;
          case 6: 
            { return COLON;
            }
          case 106: break;
          case 7: 
            { return DOT;
            }
          case 107: break;
          case 8: 
            { return COMMA;
            }
          case 108: break;
          case 9: 
            { return LEFT_BRACE;
            }
          case 109: break;
          case 10: 
            { return RIGHT_BRACE;
            }
          case 110: break;
          case 11: 
            { return LEFT_PARENTHESIS;
            }
          case 111: break;
          case 12: 
            { return RIGHT_PARENTHESIS;
            }
          case 112: break;
          case 13: 
            { return LEFT_BRACKET;
            }
          case 113: break;
          case 14: 
            { return RIGHT_BRACKET;
            }
          case 114: break;
          case 15: 
            { return QUESTION_MARK;
            }
          case 115: break;
          case 16: 
            { return ADD;
            }
          case 116: break;
          case 17: 
            { return SUB;
            }
          case 117: break;
          case 18: 
            { return MUL;
            }
          case 118: break;
          case 19: 
            { return POW;
            }
          case 119: break;
          case 20: 
            { return MOD;
            }
          case 120: break;
          case 21: 
            { return NOT;
            }
          case 121: break;
          case 22: 
            { return GT;
            }
          case 122: break;
          case 23: 
            { return LT;
            }
          case 123: break;
          case 24: 
            { return AT;
            }
          case 124: break;
          case 25: 
            { return BACKTICK;
            }
          case 125: break;
          case 26: 
            { return LINE_COMMENT;
            }
          case 126: break;
          case 27: 
            { return AS;
            }
          case 127: break;
          case 28: 
            { return IN;
            }
          case 128: break;
          case 29: 
            { return IF;
            }
          case 129: break;
          case 30: 
            { return EQUAL;
            }
          case 130: break;
          case 31: 
            { return RANGE;
            }
          case 131: break;
          case 32: 
            { return RARROW;
            }
          case 132: break;
          case 33: 
            { return NOT_EQUAL;
            }
          case 133: break;
          case 34: 
            { return GT_EQUAL;
            }
          case 134: break;
          case 35: 
            { return LT_EQUAL;
            }
          case 135: break;
          case 36: 
            { return LARROW;
            }
          case 136: break;
          case 37: 
            { return AND;
            }
          case 137: break;
          case 38: 
            { return OR;
            }
          case 138: break;
          case 39: 
            { return ALL;
            }
          case 139: break;
          case 40: 
            { return TYPE_ANY;
            }
          case 140: break;
          case 41: 
            { return TYPE_INT;
            }
          case 141: break;
          case 42: 
            { return TYPE_MAP;
            }
          case 142: break;
          case 43: 
            { return TRY;
            }
          case 143: break;
          case 44: 
            { return VAR;
            }
          case 144: break;
          case 45: 
            { return TYPE_XML;
            }
          case 145: break;
          case 46: 
            { return ELSE;
            }
          case 146: break;
          case 47: 
            { return ENUM;
            }
          case 147: break;
          case 48: 
            { return TYPE_TYPE;
            }
          case 148: break;
          case 49: 
            { return SOME;
            }
          case 149: break;
          case 50: 
            { return BIND;
            }
          case 150: break;
          case 51: 
            { return TYPE_BLOB;
            }
          case 151: break;
          case 52: 
            { return LOCK;
            }
          case 152: break;
          case 53: 
            { return NEXT;
            }
          case 153: break;
          case 54: 
            { return FORK;
            }
          case 154: break;
          case 55: 
            { return WITH;
            }
          case 155: break;
          case 56: 
            { return JOIN;
            }
          case 156: break;
          case 57: 
            { return TYPE_JSON;
            }
          case 157: break;
          case 58: 
            { return ABORT;
            }
          case 158: break;
          case 59: 
            { return CATCH;
            }
          case 159: break;
          case 60: 
            { return CONST;
            }
          case 160: break;
          case 61: 
            { return INDEX;
            }
          case 161: break;
          case 62: 
            { return TYPE_TABLE;
            }
          case 162: break;
          case 63: 
            { return THROW;
            }
          case 163: break;
          case 64: 
            { return BREAK;
            }
          case 164: break;
          case 65: 
            { return TYPE_FLOAT;
            }
          case 165: break;
          case 66: 
            { return WHILE;
            }
          case 166: break;
          case 67: 
            { return XMLNS;
            }
          case 167: break;
          case 68: 
            { return PUBLIC;
            }
          case 168: break;
          case 69: 
            { return ACTION;
            }
          case 169: break;
          case 70: 
            { return ATTACH;
            }
          case 170: break;
          case 71: 
            { return CREATE;
            }
          case 171: break;
          case 72: 
            { return IMPORT;
            }
          case 172: break;
          case 73: 
            { return RETURN;
            }
          case 173: break;
          case 74: 
            { return TYPEOF;
            }
          case 174: break;
          case 75: 
            { return TYPE_STRING;
            }
          case 175: break;
          case 76: 
            { return STRUCT;
            }
          case 176: break;
          case 77: 
            { return NATIVE;
            }
          case 177: break;
          case 78: 
            { return FAILED;
            }
          case 178: break;
          case 79: 
            { return WORKER;
            }
          case 179: break;
          case 80: 
            { return PACKAGE;
            }
          case 180: break;
          case 81: 
            { return PRIVATE;
            }
          case 181: break;
          case 82: 
            { return RETRIES;
            }
          case 182: break;
          case 83: 
            { return RETURNS;
            }
          case 183: break;
          case 84: 
            { return TIMEOUT;
            }
          case 184: break;
          case 85: 
            { return SERVICE;
            }
          case 185: break;
          case 86: 
            { return TYPE_BOOL;
            }
          case 186: break;
          case 87: 
            { return FINALLY;
            }
          case 187: break;
          case 88: 
            { return FOREACH;
            }
          case 188: break;
          case 89: 
            { return VERSION;
            }
          case 189: break;
          case 90: 
            { return ENDPOINT;
            }
          case 190: break;
          case 91: 
            { return RESOURCE;
            }
          case 191: break;
          case 92: 
            { return LENGTHOF;
            }
          case 192: break;
          case 93: 
            { return FUNCTION;
            }
          case 193: break;
          case 94: 
            { return CONNECTOR;
            }
          case 194: break;
          case 95: 
            { return ANNOTATION;
            }
          case 195: break;
          case 96: 
            { return STRUCTBODY;
            }
          case 196: break;
          case 97: 
            { return TRANSACTION;
            }
          case 197: break;
          case 98: 
            { return TRANSFORMER;
            }
          case 198: break;
          case 99: 
            { return XMLLOCALNAME;
            }
          case 199: break;
          case 100: 
            { return XMLNAMESPACENAME;
            }
          case 200: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
