/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.ballerinalang.plugins.idea.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ballerinalang.plugins.idea.psi.BallerinaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Ballerina.flex</tt>
 */
public class BallerinaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_TEMPLATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13888 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\14\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\140"+
    "\1\25\45\13\1\141\1\13\1\142\1\30\4\13\1\30\1\143\1\144\1\16\1\13\1\16\1\13"+
    "\1\16\1\144\1\71\3\13\1\145\1\1\1\146\1\114\2\1\1\114\5\13\1\27\2\13\1\147"+
    "\4\13\1\40\1\13\1\150\2\1\1\65\1\13\1\151\1\47\2\13\1\152\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\153\5\1\1\107\2\13\1\145\1\154\1\114"+
    "\2\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\145\1\1\1\157\1\42\1\13\1"+
    "\151\6\1\1\160\1\161\14\13\4\1\21\13\1\140\2\13\1\140\1\162\1\13\1\151\3\13"+
    "\1\163\1\164\1\165\1\124\1\164\1\166\1\1\1\167\2\1\1\170\1\1\1\171\1\1\1\124"+
    "\6\1\1\172\1\173\1\174\1\175\1\176\3\1\1\177\147\1\2\13\1\150\2\13\1\150\10"+
    "\13\1\200\1\201\2\13\1\132\3\13\1\202\1\1\1\13\1\112\4\203\4\1\1\105\35\1"+
    "\1\204\2\1\1\205\1\25\4\13\1\206\1\25\4\13\1\133\1\107\1\13\1\151\1\25\4\13"+
    "\1\150\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\124\4\1\2\13\1\151\20\13\1\124\1\13\1\207\1\1\2\13\1\150\1\105\1\13\1\151"+
    "\4\13\1\40\2\1\1\210\1\211\5\13\1\212\1\13\1\151\1\27\3\1\1\210\1\213\1\13"+
    "\1\31\1\1\3\13\1\145\1\211\2\13\1\145\1\1\1\114\1\1\1\214\1\42\1\13\1\40\1"+
    "\13\1\112\1\1\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\215\1\216\2\13\1\46"+
    "\1\1\1\217\1\114\1\13\1\220\3\13\1\221\1\222\1\223\1\30\1\66\1\224\1\225\1"+
    "\203\2\13\1\133\1\40\7\13\1\31\1\114\72\13\1\145\1\13\1\226\2\13\1\152\20"+
    "\1\26\13\1\151\6\13\1\77\2\1\1\112\1\227\1\56\1\230\1\231\6\13\1\16\1\1\1"+
    "\155\25\13\1\151\1\1\4\13\1\211\2\13\1\27\2\1\1\152\7\1\1\215\7\13\1\124\1"+
    "\1\1\114\1\25\1\30\1\25\1\30\1\232\4\13\1\150\1\233\1\234\2\1\1\235\1\13\1"+
    "\14\1\236\2\151\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\237\2\13\1\40\1\13\1\151\2\13\1\240\3\1\11\13\1\151\1\114\5\1\2\13\1\27"+
    "\3\13\1\145\11\1\23\13\1\112\1\13\1\40\1\27\11\1\1\241\2\13\1\242\1\13\1\40"+
    "\1\13\1\112\1\13\1\150\4\1\1\13\1\243\1\13\1\40\1\13\1\77\4\1\3\13\1\244\4"+
    "\1\1\71\1\245\1\13\1\145\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1"+
    "\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13"+
    "\1\31\60\1\1\155\2\13\1\27\2\1\1\65\1\1\1\155\2\13\2\1\1\13\1\46\1\114\1\155"+
    "\1\13\1\112\1\65\1\1\2\13\1\246\1\155\2\13\1\31\1\247\1\250\2\1\1\13\1\22"+
    "\1\152\5\1\1\251\1\252\1\46\2\13\1\150\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1"+
    "\253\1\16\21\1\3\13\1\1\1\254\1\114\12\1\2\13\1\150\2\1\1\255\2\1\3\13\1\1"+
    "\1\256\1\114\2\1\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114"+
    "\1\105\34\1\3\13\1\46\20\1\71\13\1\77\16\1\14\13\1\145\53\1\2\13\1\150\75"+
    "\1\44\13\1\112\33\1\43\13\1\46\1\13\1\150\1\114\6\1\1\13\1\151\1\1\3\13\1"+
    "\1\1\145\1\114\1\155\1\257\1\13\67\1\4\13\1\47\1\71\3\1\1\155\6\1\1\16\77"+
    "\1\6\13\1\30\1\124\1\46\1\77\66\1\5\13\1\215\3\13\1\144\1\260\1\261\1\262"+
    "\3\13\1\263\1\264\1\13\1\265\1\266\1\36\24\13\1\267\1\13\1\36\1\133\1\13\1"+
    "\133\1\13\1\215\1\13\1\215\1\150\1\13\1\150\1\13\1\56\1\13\1\56\1\13\1\270"+
    "\3\271\14\13\1\47\123\1\1\262\1\13\1\272\1\273\1\274\1\275\1\276\1\277\1\300"+
    "\1\152\1\301\1\152\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\151\150\13\1\16"+
    "\25\1\41\13\1\151\36\1");

  /* The ZZ_CMAP_A table has 3104 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\17\1\10\2\17\1\10\22\0\1\17\1\63\1\2\2\0\1\62\1\66\1\0\1\50\1\51\1"+
    "\60\1\56\1\47\1\57\1\46\1\7\12\3\1\45\1\44\1\65\1\55\1\64\1\54\1\70\32\4\1"+
    "\52\1\1\1\53\1\61\1\4\1\20\1\23\1\24\1\26\1\32\1\33\1\5\1\16\1\31\1\14\1\40"+
    "\1\34\1\27\1\37\1\15\1\25\1\35\1\4\1\13\1\11\1\12\1\36\1\41\1\43\1\42\1\30"+
    "\1\4\1\21\1\67\1\22\7\0\1\6\12\0\1\6\11\0\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1"+
    "\0\12\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\1\0\5\4\1\0\2\4\2\0\4\4\1\0\1\4"+
    "\6\0\1\4\1\0\3\4\1\0\1\4\1\0\4\4\1\0\23\4\1\0\13\4\10\0\6\4\1\0\26\4\2\0\1"+
    "\4\6\0\10\4\10\0\13\4\5\0\3\4\15\0\12\3\4\0\6\4\1\0\1\4\17\0\2\4\7\0\2\4\12"+
    "\3\3\4\2\0\2\4\1\0\16\4\15\0\11\4\13\0\1\4\16\0\12\3\6\4\4\0\2\4\4\0\1\4\5"+
    "\0\6\4\4\0\1\4\11\0\1\4\3\0\1\4\7\0\11\4\7\0\5\4\17\0\26\4\3\0\1\4\2\0\1\4"+
    "\7\0\12\4\4\0\12\3\1\4\4\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3"+
    "\0\1\4\20\0\1\4\15\0\2\4\1\0\1\4\5\0\6\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\17"+
    "\0\4\4\1\0\1\4\7\0\12\3\2\0\3\4\20\0\11\4\1\0\2\4\1\0\2\4\1\0\5\4\3\0\1\4"+
    "\2\0\1\4\30\0\1\4\13\0\10\4\2\0\1\4\3\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2"+
    "\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\13\0\10\4\1\0\2\4\10\0\3\4\5\0"+
    "\4\4\1\0\5\4\3\0\1\4\3\0\2\4\15\0\13\4\2\0\1\4\21\0\1\4\12\0\6\4\5\0\22\4"+
    "\3\0\10\4\1\0\11\4\1\0\1\4\2\0\7\4\11\0\1\4\1\0\2\4\14\0\12\3\7\0\2\4\1\0"+
    "\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2"+
    "\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0\1\4\11\0\12\3\2\0\14\4\1\0\24\4\13"+
    "\0\5\4\3\0\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0\3\4\4\0\15\4\14\0\1\4\1\0\6\4\1"+
    "\0\1\4\5\0\1\4\2\0\13\4\1\0\15\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\1\4\1"+
    "\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\16\4\2\0\6\4\2\0\15\4\2\0\1\4\1\6\17\4"+
    "\1\0\10\4\7\0\15\4\1\0\6\4\23\0\1\4\4\0\1\4\3\0\11\4\1\0\1\4\5\0\17\4\1\0"+
    "\16\4\2\0\14\4\13\0\1\4\15\0\7\4\7\0\16\4\15\0\2\4\12\3\3\0\3\4\11\0\4\4\1"+
    "\0\4\4\3\0\2\4\11\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\6\4\1\0\7\4\1\0\1\4\3"+
    "\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\13\6\15\0\2\6\5\0\1\6\17\0\1\6\1\0\1\4"+
    "\15\0\1\4\2\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\4\0\2\4\13\0\5\4\6\0\4\4\3\0\2\4"+
    "\14\0\10\4\7\0\10\4\1\0\7\4\1\0\1\6\4\0\2\4\12\0\5\4\5\0\2\4\3\0\7\4\6\0\3"+
    "\4\12\3\2\4\13\0\11\4\2\0\27\4\2\0\7\4\1\0\3\4\1\0\4\4\1\0\4\4\2\0\6\4\3\0"+
    "\1\4\1\0\1\4\2\0\5\4\1\0\12\4\12\3\5\4\1\0\3\4\1\0\10\4\4\0\7\4\3\0\1\4\3"+
    "\0\2\4\1\0\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\3\0\6\4\2\0\6\4\2"+
    "\0\6\4\11\0\7\4\4\0\5\4\3\0\5\4\5\0\1\4\1\0\10\4\1\0\5\4\1\0\1\4\1\0\2\4\1"+
    "\0\2\4\1\0\12\4\6\0\12\4\2\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0\14\4\1\0\16\4"+
    "\1\0\2\4\1\0\2\4\1\0\10\4\6\0\4\4\4\0\16\4\2\0\1\4\1\0\14\4\1\0\2\4\3\0\1"+
    "\4\2\0\4\4\1\0\2\4\12\0\10\4\6\0\6\4\1\0\3\4\1\0\12\4\3\0\1\4\12\0\4\4\13"+
    "\0\12\3\1\4\1\0\1\4\3\0\7\4\1\0\1\4\1\0\4\4\1\0\17\4\1\0\2\4\14\0\3\4\4\0"+
    "\2\4\1\0\1\4\20\0\4\4\10\0\1\4\13\0\10\4\5\0\3\4\2\0\1\4\2\0\2\4\2\0\4\4\1"+
    "\0\14\4\1\0\1\4\1\0\7\4\1\0\21\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\14\4\1\0\4\4"+
    "\1\0\5\4\1\0\1\4\3\0\14\4\2\0\13\4\1\0\10\4\2\0\22\3\1\0\2\4\1\0\1\4\2\0\1"+
    "\4\1\0\12\4\1\0\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3"+
    "\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4"+
    "\2\0\4\4\1\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4\1\0\5\4\1\0\3\4\1\0\5\4"+
    "\1\0\5\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\5\1\6\5\4"+
    "\1\7\1\10\13\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\1\1\33\1\34"+
    "\1\35\1\36\1\34\2\2\5\4\1\37\11\4\1\40"+
    "\1\41\3\4\1\0\1\42\1\43\34\4\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\0"+
    "\2\34\1\0\1\55\11\4\1\56\6\4\1\57\5\4"+
    "\1\60\2\4\1\61\20\4\1\62\2\4\1\63\1\4"+
    "\1\64\3\4\5\34\1\55\3\4\1\65\4\4\1\66"+
    "\4\4\1\67\6\4\1\70\5\4\1\71\1\4\1\72"+
    "\4\4\1\73\2\4\1\74\1\75\4\4\1\76\1\77"+
    "\2\4\1\100\2\4\1\0\3\34\2\55\1\34\3\4"+
    "\1\101\6\4\1\102\1\4\1\103\7\4\1\104\1\4"+
    "\1\105\2\4\1\106\1\107\10\4\1\110\1\4\1\111"+
    "\2\34\3\55\1\4\1\112\2\4\1\113\1\114\4\4"+
    "\1\115\2\4\1\116\1\117\1\120\1\121\1\4\1\122"+
    "\1\4\1\123\6\4\1\124\1\4\1\125\1\55\1\126"+
    "\1\127\1\4\1\0\1\130\1\131\2\4\1\132\1\4"+
    "\1\133\1\134\1\4\1\135\3\4\1\136\1\4\1\137"+
    "\1\140\1\141\2\4\1\142\2\4\1\143\1\144\4\4"+
    "\1\145\1\146\2\4\1\147\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\162\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\162\0\162\0\u05ca\0\162\0\162"+
    "\0\162\0\162\0\162\0\162\0\u0603\0\162\0\u063c\0\162"+
    "\0\162\0\162\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\162"+
    "\0\u0792\0\u07cb\0\162\0\u0804\0\u083d\0\162\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u011d\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u031e\0\162\0\u011d\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b"+
    "\0\u12b4\0\162\0\162\0\162\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\u07cb\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u011d\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u011d\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u011d\0\u187e"+
    "\0\u18b7\0\u011d\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5"+
    "\0\u1c0e\0\u1c47\0\u011d\0\u1c80\0\u1cb9\0\u011d\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\162\0\u1f2c\0\u1f65\0\u1f9e\0\u011d\0\u1fd7\0\u2010\0\u2049"+
    "\0\u2082\0\u011d\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u011d\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\u011d\0\u244b\0\u011d\0\u2484\0\u24bd"+
    "\0\u24f6\0\u252f\0\u011d\0\u2568\0\u25a1\0\u011d\0\u011d\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u011d\0\u011d\0\u26be\0\u26f7\0\u011d"+
    "\0\u2730\0\u2769\0\u13d1\0\u27a2\0\u27db\0\u2814\0\u284d\0\u1e81"+
    "\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u011d\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u011d\0\u2ac0\0\u011d\0\u2af9\0\u2b32"+
    "\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u011d\0\u2c88\0\u011d"+
    "\0\u2cc1\0\u2cfa\0\u011d\0\u011d\0\u2d33\0\u2d6c\0\u2da5\0\u2dde"+
    "\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u011d\0\u2efb\0\u011d\0\u2f34"+
    "\0\u2f6d\0\u1eba\0\u12ed\0\u0804\0\u2fa6\0\u011d\0\u2fdf\0\u3018"+
    "\0\u3051\0\u011d\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u011d\0\u316e"+
    "\0\u31a7\0\u31e0\0\u011d\0\u011d\0\u011d\0\u3219\0\u011d\0\u3252"+
    "\0\u011d\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u011d"+
    "\0\u33e1\0\u011d\0\u2886\0\u011d\0\u011d\0\u341a\0\u3453\0\162"+
    "\0\u011d\0\u348c\0\u34c5\0\u011d\0\u34fe\0\u011d\0\u011d\0\u3537"+
    "\0\u011d\0\u3570\0\u35a9\0\u35e2\0\u011d\0\u361b\0\u011d\0\u011d"+
    "\0\u011d\0\u3654\0\u368d\0\u011d\0\u36c6\0\u36ff\0\u011d\0\u011d"+
    "\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u011d\0\u011d\0\u381c\0\u3855"+
    "\0\u011d\0\u011d\0\u011d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\1\6\1\7\1\10\1\11\1\10"+
    "\1\12\1\13\1\14\1\15\1\16\1\6\1\10\1\3"+
    "\1\17\1\20\1\21\1\22\1\6\1\23\1\24\3\6"+
    "\1\25\1\6\1\26\1\6\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\16\61\1\63\1\64\47\61\71\0\1\4\1\65\1\66"+
    "\66\4\3\0\1\5\70\0\3\6\3\0\6\6\4\0"+
    "\21\6\30\0\3\6\3\0\3\6\1\67\2\6\4\0"+
    "\1\70\1\6\1\71\1\6\1\72\6\6\1\73\5\6"+
    "\33\0\1\10\1\0\1\10\6\0\1\10\60\0\1\74"+
    "\64\0\3\6\3\0\1\6\1\75\4\6\4\0\2\6"+
    "\1\76\5\6\1\77\10\6\30\0\3\6\3\0\2\6"+
    "\1\100\1\101\2\6\4\0\1\102\4\6\1\103\1\104"+
    "\12\6\30\0\3\6\3\0\6\6\4\0\10\6\1\105"+
    "\10\6\30\0\2\6\1\106\3\0\4\6\1\107\1\6"+
    "\4\0\14\6\1\110\4\6\30\0\3\6\3\0\6\6"+
    "\4\0\1\111\7\6\1\112\10\6\33\0\1\113\1\0"+
    "\1\113\6\0\1\113\2\0\1\114\51\0\3\6\3\0"+
    "\1\115\1\116\2\6\1\117\1\6\4\0\1\6\1\120"+
    "\1\6\1\121\1\122\14\6\30\0\3\6\3\0\2\6"+
    "\1\123\1\124\2\6\4\0\2\6\1\125\1\6\1\126"+
    "\14\6\30\0\3\6\3\0\2\6\1\127\3\6\4\0"+
    "\1\130\1\6\1\131\16\6\30\0\3\6\3\0\6\6"+
    "\4\0\2\6\1\132\5\6\1\133\10\6\30\0\3\6"+
    "\3\0\4\6\1\134\1\6\4\0\4\6\1\135\14\6"+
    "\30\0\3\6\3\0\2\6\1\136\3\6\4\0\1\137"+
    "\12\6\1\140\5\6\30\0\3\6\3\0\6\6\4\0"+
    "\1\141\20\6\30\0\3\6\3\0\1\142\5\6\4\0"+
    "\2\6\1\143\16\6\30\0\3\6\3\0\6\6\4\0"+
    "\1\144\7\6\1\145\10\6\30\0\3\6\3\0\6\6"+
    "\4\0\14\6\1\146\4\6\30\0\3\6\3\0\3\6"+
    "\1\147\2\6\4\0\2\6\1\150\3\6\1\151\12\6"+
    "\73\0\1\152\77\0\1\153\77\0\1\154\61\0\1\155"+
    "\70\0\1\156\70\0\1\157\1\0\1\160\77\0\1\161"+
    "\71\0\1\162\1\0\1\61\1\163\16\61\1\0\1\64"+
    "\47\61\1\164\1\61\16\164\1\165\1\166\47\164\1\61"+
    "\1\167\16\61\1\0\1\170\47\61\1\4\1\65\67\4"+
    "\3\0\3\6\3\0\4\6\1\171\1\6\4\0\21\6"+
    "\30\0\3\6\3\0\3\6\1\172\2\6\4\0\21\6"+
    "\30\0\3\6\3\0\2\6\1\173\3\6\4\0\21\6"+
    "\30\0\3\6\3\0\6\6\4\0\2\6\1\174\16\6"+
    "\30\0\3\6\3\0\4\6\1\175\1\6\4\0\21\6"+
    "\25\0\10\74\1\0\60\74\3\0\3\6\3\0\2\6"+
    "\1\176\3\6\4\0\21\6\30\0\3\6\3\0\6\6"+
    "\4\0\14\6\1\177\4\6\30\0\3\6\3\0\2\6"+
    "\1\200\3\6\4\0\21\6\30\0\3\6\3\0\6\6"+
    "\4\0\1\201\4\6\1\202\13\6\30\0\3\6\3\0"+
    "\6\6\4\0\14\6\1\203\4\6\30\0\3\6\3\0"+
    "\6\6\4\0\1\6\1\204\17\6\30\0\3\6\3\0"+
    "\6\6\4\0\12\6\1\205\6\6\30\0\3\6\3\0"+
    "\2\6\1\206\3\6\4\0\21\6\30\0\3\6\3\0"+
    "\1\207\1\210\4\6\4\0\21\6\30\0\3\6\3\0"+
    "\1\6\1\211\4\6\4\0\21\6\30\0\3\6\3\0"+
    "\6\6\4\0\12\6\1\212\6\6\30\0\3\6\3\0"+
    "\1\6\1\213\4\6\4\0\21\6\30\0\3\6\3\0"+
    "\6\6\4\0\17\6\1\214\1\6\30\0\3\6\3\0"+
    "\1\6\1\215\4\6\4\0\21\6\30\0\3\6\3\0"+
    "\4\6\1\216\1\6\4\0\5\6\1\217\13\6\30\0"+
    "\3\6\3\0\6\6\4\0\2\6\1\220\16\6\30\0"+
    "\3\6\3\0\1\6\1\221\4\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\4\6\1\222\14\6\30\0"+
    "\3\6\3\0\6\6\4\0\10\6\1\223\10\6\30\0"+
    "\3\6\3\0\4\6\1\224\1\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\2\6\1\225\16\6\30\0"+
    "\3\6\3\0\6\6\4\0\2\6\1\226\16\6\30\0"+
    "\3\6\3\0\6\6\4\0\10\6\1\227\10\6\30\0"+
    "\3\6\3\0\1\6\1\230\4\6\4\0\21\6\30\0"+
    "\3\6\3\0\4\6\1\231\1\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\3\6\1\232\15\6\30\0"+
    "\3\6\3\0\4\6\1\233\1\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\7\6\1\234\3\6\1\235"+
    "\5\6\30\0\3\6\3\0\1\236\5\6\4\0\21\6"+
    "\30\0\3\6\3\0\3\6\1\237\2\6\4\0\21\6"+
    "\30\0\3\6\3\0\2\6\1\240\3\6\4\0\3\6"+
    "\1\241\15\6\30\0\3\6\3\0\6\6\4\0\1\6"+
    "\1\242\17\6\30\0\3\6\3\0\6\6\4\0\12\6"+
    "\1\243\6\6\30\0\3\6\3\0\6\6\4\0\2\6"+
    "\1\244\16\6\30\0\3\6\3\0\3\6\1\245\2\6"+
    "\4\0\21\6\30\0\3\6\3\0\2\6\1\246\3\6"+
    "\4\0\21\6\30\0\3\6\3\0\2\6\1\247\3\6"+
    "\4\0\21\6\30\0\3\6\3\0\6\6\4\0\4\6"+
    "\1\250\14\6\30\0\3\6\3\0\1\6\1\251\4\6"+
    "\4\0\21\6\30\0\3\6\3\0\2\6\1\252\3\6"+
    "\4\0\21\6\30\0\3\6\3\0\3\6\1\253\2\6"+
    "\4\0\21\6\25\0\1\164\1\254\67\164\1\165\1\255"+
    "\16\165\1\164\1\256\50\165\1\255\16\165\1\164\1\257"+
    "\47\165\1\0\1\61\16\0\1\61\1\260\70\0\1\261"+
    "\52\0\3\6\3\0\6\6\4\0\1\262\20\6\30\0"+
    "\3\6\3\0\6\6\4\0\4\6\1\263\14\6\30\0"+
    "\3\6\3\0\6\6\4\0\10\6\1\264\1\265\7\6"+
    "\30\0\3\6\3\0\6\6\4\0\1\266\20\6\30\0"+
    "\3\6\3\0\6\6\4\0\3\6\1\267\15\6\30\0"+
    "\3\6\3\0\3\6\1\270\2\6\4\0\13\6\1\271"+
    "\5\6\30\0\3\6\3\0\6\6\4\0\10\6\1\272"+
    "\10\6\30\0\3\6\3\0\6\6\4\0\16\6\1\273"+
    "\2\6\30\0\3\6\3\0\4\6\1\274\1\6\4\0"+
    "\21\6\30\0\3\6\3\0\6\6\4\0\10\6\1\275"+
    "\10\6\30\0\3\6\3\0\6\6\4\0\4\6\1\276"+
    "\14\6\30\0\3\6\3\0\6\6\4\0\10\6\1\277"+
    "\10\6\30\0\3\6\3\0\6\6\4\0\2\6\1\300"+
    "\16\6\30\0\3\6\3\0\6\6\4\0\2\6\1\301"+
    "\16\6\30\0\3\6\3\0\2\6\1\302\3\6\4\0"+
    "\13\6\1\303\5\6\30\0\3\6\3\0\6\6\4\0"+
    "\2\6\1\304\16\6\30\0\3\6\3\0\3\6\1\305"+
    "\2\6\4\0\21\6\30\0\3\6\3\0\1\6\1\306"+
    "\4\6\4\0\21\6\30\0\3\6\3\0\6\6\4\0"+
    "\1\307\20\6\30\0\3\6\3\0\6\6\4\0\2\6"+
    "\1\310\16\6\30\0\3\6\3\0\2\6\1\311\3\6"+
    "\4\0\21\6\30\0\3\6\3\0\3\6\1\312\2\6"+
    "\4\0\21\6\30\0\3\6\3\0\6\6\4\0\1\313"+
    "\20\6\30\0\3\6\3\0\6\6\4\0\7\6\1\314"+
    "\11\6\30\0\3\6\3\0\6\6\4\0\4\6\1\315"+
    "\14\6\30\0\3\6\3\0\6\6\4\0\1\6\1\316"+
    "\17\6\30\0\3\6\3\0\6\6\4\0\1\317\20\6"+
    "\30\0\3\6\3\0\6\6\4\0\3\6\1\320\15\6"+
    "\30\0\3\6\3\0\1\321\3\6\1\322\1\6\4\0"+
    "\21\6\30\0\3\6\3\0\6\6\4\0\11\6\1\323"+
    "\7\6\30\0\3\6\3\0\5\6\1\324\4\0\21\6"+
    "\30\0\3\6\3\0\6\6\4\0\12\6\1\325\6\6"+
    "\30\0\3\6\3\0\6\6\4\0\14\6\1\326\4\6"+
    "\30\0\3\6\3\0\6\6\4\0\10\6\1\327\10\6"+
    "\30\0\3\6\3\0\6\6\4\0\16\6\1\330\2\6"+
    "\30\0\3\6\3\0\6\6\4\0\1\331\20\6\30\0"+
    "\3\6\3\0\6\6\4\0\11\6\1\332\7\6\30\0"+
    "\3\6\3\0\6\6\4\0\4\6\1\333\14\6\30\0"+
    "\3\6\3\0\4\6\1\334\1\6\4\0\21\6\30\0"+
    "\3\6\3\0\4\6\1\335\1\6\4\0\21\6\30\0"+
    "\3\6\3\0\1\336\5\6\4\0\21\6\30\0\3\6"+
    "\3\0\4\6\1\337\1\6\4\0\21\6\30\0\3\6"+
    "\3\0\6\6\4\0\6\6\1\340\12\6\30\0\3\6"+
    "\3\0\6\6\4\0\11\6\1\341\7\6\30\0\3\6"+
    "\3\0\6\6\4\0\4\6\1\342\14\6\25\0\1\61"+
    "\1\167\16\61\1\0\1\343\47\61\1\165\1\344\17\165"+
    "\1\345\50\165\1\346\16\165\1\164\1\347\50\165\1\255"+
    "\16\165\1\164\1\350\47\165\1\61\1\163\16\61\1\0"+
    "\1\351\47\61\3\0\3\6\3\0\6\6\4\0\4\6"+
    "\1\352\14\6\30\0\3\6\3\0\6\6\4\0\10\6"+
    "\1\353\10\6\30\0\3\6\3\0\6\6\4\0\1\354"+
    "\20\6\30\0\3\6\3\0\1\6\1\355\4\6\4\0"+
    "\21\6\30\0\3\6\3\0\1\6\1\356\4\6\4\0"+
    "\21\6\30\0\3\6\3\0\4\6\1\357\1\6\4\0"+
    "\21\6\30\0\3\6\3\0\6\6\4\0\3\6\1\360"+
    "\15\6\30\0\3\6\3\0\3\6\1\361\2\6\4\0"+
    "\21\6\30\0\3\6\3\0\1\362\5\6\4\0\21\6"+
    "\30\0\3\6\3\0\6\6\4\0\2\6\1\363\16\6"+
    "\30\0\3\6\3\0\6\6\4\0\10\6\1\364\10\6"+
    "\30\0\3\6\3\0\6\6\4\0\2\6\1\365\16\6"+
    "\30\0\3\6\3\0\6\6\4\0\20\6\1\366\30\0"+
    "\3\6\3\0\6\6\4\0\13\6\1\367\5\6\30\0"+
    "\3\6\3\0\3\6\1\370\2\6\4\0\21\6\30\0"+
    "\3\6\3\0\2\6\1\371\3\6\4\0\21\6\30\0"+
    "\3\6\3\0\2\6\1\372\3\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\16\6\1\373\2\6\30\0"+
    "\3\6\3\0\6\6\4\0\3\6\1\374\15\6\30\0"+
    "\3\6\3\0\1\6\1\375\4\6\4\0\21\6\30\0"+
    "\3\6\3\0\1\6\1\376\4\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\2\6\1\377\16\6\30\0"+
    "\3\6\3\0\6\6\4\0\11\6\1\u0100\7\6\30\0"+
    "\3\6\3\0\6\6\4\0\10\6\1\u0101\10\6\30\0"+
    "\3\6\3\0\1\6\1\u0102\4\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\6\6\1\u0103\12\6\30\0"+
    "\3\6\3\0\1\6\1\u0104\4\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\10\6\1\u0105\10\6\30\0"+
    "\3\6\3\0\1\6\1\u0106\4\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\2\6\1\u0107\16\6\30\0"+
    "\3\6\3\0\6\6\4\0\1\u0108\20\6\30\0\3\6"+
    "\3\0\6\6\4\0\14\6\1\u0109\4\6\30\0\3\6"+
    "\3\0\6\6\4\0\1\u010a\20\6\30\0\3\6\3\0"+
    "\3\6\1\u010b\2\6\4\0\21\6\30\0\3\6\3\0"+
    "\3\6\1\u010c\2\6\4\0\21\6\30\0\3\6\3\0"+
    "\1\u010d\5\6\4\0\21\6\30\0\3\6\3\0\6\6"+
    "\4\0\10\6\1\u010e\10\6\30\0\3\6\3\0\6\6"+
    "\4\0\10\6\1\u010f\10\6\25\0\1\61\1\u0110\17\61"+
    "\1\u0111\47\61\1\165\1\255\16\165\1\164\1\u0112\47\165"+
    "\1\61\1\344\17\61\1\u0111\47\61\1\164\1\254\17\164"+
    "\1\u0113\47\164\1\61\1\163\16\61\1\0\1\u0114\47\61"+
    "\3\0\3\6\3\0\6\6\4\0\4\6\1\u0115\14\6"+
    "\30\0\3\6\3\0\6\6\4\0\7\6\1\u0116\11\6"+
    "\30\0\3\6\3\0\6\6\4\0\3\6\1\u0117\15\6"+
    "\30\0\3\6\3\0\3\6\1\u0118\2\6\4\0\21\6"+
    "\30\0\3\6\3\0\5\6\1\u0119\4\0\21\6\30\0"+
    "\3\6\3\0\1\6\1\u011a\4\6\4\0\21\6\30\0"+
    "\3\6\3\0\6\6\4\0\3\6\1\u011b\15\6\30\0"+
    "\2\6\1\u011c\3\0\6\6\4\0\1\u011d\20\6\30\0"+
    "\3\6\3\0\6\6\4\0\13\6\1\u011e\5\6\30\0"+
    "\2\6\1\u011f\3\0\6\6\4\0\21\6\30\0\3\6"+
    "\3\0\2\6\1\u0120\3\6\4\0\21\6\30\0\3\6"+
    "\3\0\6\6\4\0\10\6\1\u0121\10\6\30\0\3\6"+
    "\3\0\4\6\1\u0122\1\6\4\0\21\6\30\0\3\6"+
    "\3\0\1\6\1\u0123\4\6\4\0\21\6\30\0\3\6"+
    "\3\0\6\6\4\0\10\6\1\u0124\10\6\30\0\3\6"+
    "\3\0\6\6\4\0\6\6\1\u0125\12\6\30\0\3\6"+
    "\3\0\6\6\4\0\1\u0126\20\6\30\0\3\6\3\0"+
    "\4\6\1\u0127\1\6\4\0\21\6\30\0\3\6\3\0"+
    "\6\6\4\0\1\u0128\20\6\30\0\3\6\3\0\6\6"+
    "\4\0\10\6\1\u0129\10\6\30\0\3\6\3\0\6\6"+
    "\4\0\3\6\1\u012a\15\6\30\0\3\6\3\0\6\6"+
    "\4\0\6\6\1\u012b\12\6\30\0\3\6\3\0\3\6"+
    "\1\u012c\2\6\4\0\21\6\30\0\3\6\3\0\1\6"+
    "\1\u012d\4\6\4\0\21\6\30\0\3\6\3\0\6\6"+
    "\4\0\10\6\1\u012e\10\6\30\0\3\6\3\0\5\6"+
    "\1\u012f\4\0\21\6\30\0\3\6\3\0\6\6\4\0"+
    "\3\6\1\u0130\15\6\30\0\3\6\3\0\6\6\4\0"+
    "\2\6\1\u0131\16\6\30\0\3\6\3\0\2\6\1\u0132"+
    "\3\6\4\0\21\6\25\0\1\165\1\u0110\17\165\1\345"+
    "\47\165\1\61\1\163\16\61\1\0\1\u0133\47\61\3\0"+
    "\3\6\3\0\6\6\4\0\5\6\1\u0134\13\6\30\0"+
    "\3\6\3\0\6\6\4\0\6\6\1\u0135\12\6\30\0"+
    "\3\6\3\0\6\6\4\0\2\6\1\u0136\16\6\30\0"+
    "\3\6\2\0\1\u0137\6\6\1\u0137\1\u0138\2\0\21\6"+
    "\30\0\3\6\3\0\6\6\4\0\10\6\1\u0139\10\6"+
    "\30\0\3\6\3\0\6\6\4\0\2\6\1\u013a\16\6"+
    "\30\0\3\6\3\0\6\6\4\0\3\6\1\u013b\15\6"+
    "\30\0\3\6\3\0\1\6\1\u013c\4\6\4\0\21\6"+
    "\30\0\3\6\3\0\6\6\4\0\3\6\1\u013d\15\6"+
    "\30\0\3\6\3\0\1\u013e\5\6\4\0\21\6\30\0"+
    "\3\6\3\0\1\u013f\5\6\4\0\21\6\30\0\3\6"+
    "\3\0\1\6\1\u0140\4\6\4\0\21\6\30\0\3\6"+
    "\3\0\4\6\1\u0141\1\6\4\0\21\6\30\0\3\6"+
    "\3\0\1\6\1\u0142\4\6\4\0\21\6\30\0\3\6"+
    "\3\0\6\6\4\0\2\6\1\u0143\16\6\30\0\3\6"+
    "\3\0\4\6\1\u0144\1\6\4\0\21\6\30\0\3\6"+
    "\3\0\6\6\4\0\10\6\1\u0145\10\6\30\0\3\6"+
    "\3\0\1\6\1\u0146\4\6\4\0\21\6\30\0\3\6"+
    "\3\0\6\6\4\0\10\6\1\u0147\10\6\30\0\3\6"+
    "\3\0\4\6\1\u0148\1\6\4\0\21\6\30\0\3\6"+
    "\3\0\4\6\1\u0149\1\6\4\0\21\6\35\0\1\u0137"+
    "\6\0\1\u0137\1\u0138\53\0\3\6\3\0\2\6\1\u014a"+
    "\3\6\4\0\21\6\30\0\3\6\3\0\1\6\1\u014b"+
    "\4\6\4\0\21\6\30\0\3\6\3\0\6\6\4\0"+
    "\10\6\1\u014c\10\6\30\0\3\6\3\0\3\6\1\u014d"+
    "\2\6\4\0\21\6\30\0\3\6\3\0\6\6\4\0"+
    "\2\6\1\u014e\16\6\30\0\2\6\1\u014f\3\0\6\6"+
    "\4\0\21\6\30\0\3\6\3\0\1\6\1\u0150\4\6"+
    "\4\0\21\6\30\0\3\6\3\0\6\6\4\0\10\6"+
    "\1\u0151\10\6\30\0\3\6\3\0\6\6\4\0\14\6"+
    "\1\u0152\4\6\30\0\3\6\3\0\3\6\1\u0153\2\6"+
    "\4\0\21\6\30\0\3\6\3\0\6\6\4\0\2\6"+
    "\1\u0154\16\6\30\0\3\6\3\0\2\6\1\u0155\3\6"+
    "\4\0\21\6\30\0\3\6\3\0\2\6\1\u0156\3\6"+
    "\4\0\21\6\30\0\3\6\3\0\6\6\4\0\10\6"+
    "\1\u0157\10\6\30\0\3\6\3\0\6\6\4\0\2\6"+
    "\1\u0158\16\6\30\0\3\6\3\0\4\6\1\u0159\1\6"+
    "\4\0\21\6\30\0\3\6\3\0\2\6\1\u015a\3\6"+
    "\4\0\21\6\30\0\3\6\3\0\4\6\1\u015b\1\6"+
    "\4\0\21\6\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14478];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\13\1\1\11\14\1\2\11\1\1\6\11"+
    "\1\1\1\11\1\1\3\11\5\1\1\11\2\1\1\11"+
    "\2\1\1\11\24\1\1\0\1\11\35\1\11\11\2\0"+
    "\2\1\1\0\71\1\1\11\61\1\1\0\123\1\1\0"+
    "\1\11\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean inTemplate = false;
  public BallerinaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BallerinaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 106: break;
          case 2: 
            { return QUOTEDSTRINGLITERAL;
            }
          case 107: break;
          case 3: 
            { return INTEGERLITERAL;
            }
          case 108: break;
          case 4: 
            { return IDENTIFIER;
            }
          case 109: break;
          case 5: 
            { return WHITE_SPACE;
            }
          case 110: break;
          case 6: 
            { return DIV;
            }
          case 111: break;
          case 7: 
            { return LEFT_BRACE;
            }
          case 112: break;
          case 8: 
            { return RIGHT_BRACE;
            }
          case 113: break;
          case 9: 
            { return SEMICOLON;
            }
          case 114: break;
          case 10: 
            { return COLON;
            }
          case 115: break;
          case 11: 
            { return DOT;
            }
          case 116: break;
          case 12: 
            { return COMMA;
            }
          case 117: break;
          case 13: 
            { return LEFT_PARENTHESIS;
            }
          case 118: break;
          case 14: 
            { return RIGHT_PARENTHESIS;
            }
          case 119: break;
          case 15: 
            { return LEFT_BRACKET;
            }
          case 120: break;
          case 16: 
            { return RIGHT_BRACKET;
            }
          case 121: break;
          case 17: 
            { return QUESTION_MARK;
            }
          case 122: break;
          case 18: 
            { return ASSIGN;
            }
          case 123: break;
          case 19: 
            { return ADD;
            }
          case 124: break;
          case 20: 
            { return SUB;
            }
          case 125: break;
          case 21: 
            { return MUL;
            }
          case 126: break;
          case 22: 
            { return POW;
            }
          case 127: break;
          case 23: 
            { return MOD;
            }
          case 128: break;
          case 24: 
            { return NOT;
            }
          case 129: break;
          case 25: 
            { return GT;
            }
          case 130: break;
          case 26: 
            { return LT;
            }
          case 131: break;
          case 27: 
            { return AT;
            }
          case 132: break;
          case 28: 
            { return STRING_TEMPLATE_TEXT;
            }
          case 133: break;
          case 29: 
            { yybegin(YYINITIAL);
            }
          case 134: break;
          case 30: 
            { inTemplate = false; yybegin(YYINITIAL); return STRING_TEMPLATE_LITERAL_END;
            }
          case 135: break;
          case 31: 
            { return LINE_COMMENT;
            }
          case 136: break;
          case 32: 
            { return IF;
            }
          case 137: break;
          case 33: 
            { return IN;
            }
          case 138: break;
          case 34: 
            { if(inTemplate) { yybegin(STRING_TEMPLATE); } return EXPRESSION_END;
            }
          case 139: break;
          case 35: 
            { return AS;
            }
          case 140: break;
          case 36: 
            { return RANGE;
            }
          case 141: break;
          case 37: 
            { return EQUAL;
            }
          case 142: break;
          case 38: 
            { return RARROW;
            }
          case 143: break;
          case 39: 
            { return NOT_EQUAL;
            }
          case 144: break;
          case 40: 
            { return GT_EQUAL;
            }
          case 145: break;
          case 41: 
            { return LT_EQUAL;
            }
          case 146: break;
          case 42: 
            { return LARROW;
            }
          case 147: break;
          case 43: 
            { return AND;
            }
          case 148: break;
          case 44: 
            { return OR;
            }
          case 149: break;
          case 45: 
            { yybegin(YYINITIAL); return STRING_TEMPLATE_EXPRESSION_START;
            }
          case 150: break;
          case 46: 
            { return TRY;
            }
          case 151: break;
          case 47: 
            { return INT;
            }
          case 152: break;
          case 48: 
            { return ANY;
            }
          case 153: break;
          case 49: 
            { return ALL;
            }
          case 154: break;
          case 50: 
            { return MAP;
            }
          case 155: break;
          case 51: 
            { return VAR;
            }
          case 156: break;
          case 52: 
            { return XML;
            }
          case 157: break;
          case 53: 
            { return FORK;
            }
          case 158: break;
          case 54: 
            { return SOME;
            }
          case 159: break;
          case 55: 
            { return TYPE;
            }
          case 160: break;
          case 56: 
            { return NEXT;
            }
          case 161: break;
          case 57: 
            { return BIND;
            }
          case 162: break;
          case 58: 
            { return BLOB;
            }
          case 163: break;
          case 59: 
            { return LOCK;
            }
          case 164: break;
          case 60: 
            { return ENUM;
            }
          case 165: break;
          case 61: 
            { return ELSE;
            }
          case 166: break;
          case 62: 
            { return JSON;
            }
          case 167: break;
          case 63: 
            { return JOIN;
            }
          case 168: break;
          case 64: 
            { return WITH;
            }
          case 169: break;
          case 65: 
            { return FLOAT;
            }
          case 170: break;
          case 66: 
            { return TABLE;
            }
          case 171: break;
          case 67: 
            { return THROW;
            }
          case 172: break;
          case 68: 
            { return ABORT;
            }
          case 173: break;
          case 69: 
            { return BREAK;
            }
          case 174: break;
          case 70: 
            { return CATCH;
            }
          case 175: break;
          case 71: 
            { return CONST;
            }
          case 176: break;
          case 72: 
            { return XMLNS;
            }
          case 177: break;
          case 73: 
            { return WHILE;
            }
          case 178: break;
          case 74: 
            { return FAILED;
            }
          case 179: break;
          case 75: 
            { return STRING;
            }
          case 180: break;
          case 76: 
            { return STRUCT;
            }
          case 181: break;
          case 77: 
            { return TYPEOF;
            }
          case 182: break;
          case 78: 
            { return RETURN;
            }
          case 183: break;
          case 79: 
            { return IMPORT;
            }
          case 184: break;
          case 80: 
            { return NATIVE;
            }
          case 185: break;
          case 81: 
            { return ATTACH;
            }
          case 186: break;
          case 82: 
            { return ACTION;
            }
          case 187: break;
          case 83: 
            { return CREATE;
            }
          case 188: break;
          case 84: 
            { return PUBLIC;
            }
          case 189: break;
          case 85: 
            { return WORKER;
            }
          case 190: break;
          case 86: 
            { return FINALLY;
            }
          case 191: break;
          case 87: 
            { return FOREACH;
            }
          case 192: break;
          case 88: 
            { inTemplate = true; yybegin(STRING_TEMPLATE); return STRING_TEMPLATE_LITERAL_START;
            }
          case 193: break;
          case 89: 
            { return SERVICE;
            }
          case 194: break;
          case 90: 
            { return TIMEOUT;
            }
          case 195: break;
          case 91: 
            { return RETRIES;
            }
          case 196: break;
          case 92: 
            { return RETURNS;
            }
          case 197: break;
          case 93: 
            { return BOOLEAN;
            }
          case 198: break;
          case 94: 
            { return PRIVATE;
            }
          case 199: break;
          case 95: 
            { return PACKAGE;
            }
          case 200: break;
          case 96: 
            { return VERSION;
            }
          case 201: break;
          case 97: 
            { return FUNCTION;
            }
          case 202: break;
          case 98: 
            { return RESOURCE;
            }
          case 203: break;
          case 99: 
            { return LENGTHOF;
            }
          case 204: break;
          case 100: 
            { return ENDPOINT;
            }
          case 205: break;
          case 101: 
            { return CONNECTOR;
            }
          case 206: break;
          case 102: 
            { return TYPE_PARAMETER;
            }
          case 207: break;
          case 103: 
            { return ANNOTATION;
            }
          case 208: break;
          case 104: 
            { return TRANSFORMER;
            }
          case 209: break;
          case 105: 
            { return TRANSACTION;
            }
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
