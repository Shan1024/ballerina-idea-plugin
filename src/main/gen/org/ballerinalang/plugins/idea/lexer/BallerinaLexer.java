/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.ballerinalang.plugins.idea.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ballerinalang.plugins.idea.psi.BallerinaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Ballerina.flex</tt>
 */
public class BallerinaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_TEMPLATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13888 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\14\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\140"+
    "\1\25\45\13\1\141\1\13\1\142\1\30\4\13\1\30\1\143\1\144\1\16\1\13\1\16\1\13"+
    "\1\16\1\144\1\71\3\13\1\145\1\1\1\146\1\114\2\1\1\114\5\13\1\27\2\13\1\147"+
    "\4\13\1\40\1\13\1\150\2\1\1\65\1\13\1\151\1\47\2\13\1\152\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\153\5\1\1\107\2\13\1\145\1\154\1\114"+
    "\2\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\145\1\1\1\157\1\42\1\13\1"+
    "\151\6\1\1\160\1\161\14\13\4\1\21\13\1\140\2\13\1\140\1\162\1\13\1\151\3\13"+
    "\1\163\1\164\1\165\1\124\1\164\1\166\1\1\1\167\2\1\1\170\1\1\1\171\1\1\1\124"+
    "\6\1\1\172\1\173\1\174\1\175\1\176\3\1\1\177\147\1\2\13\1\150\2\13\1\150\10"+
    "\13\1\200\1\201\2\13\1\132\3\13\1\202\1\1\1\13\1\112\4\203\4\1\1\105\35\1"+
    "\1\204\2\1\1\205\1\25\4\13\1\206\1\25\4\13\1\133\1\107\1\13\1\151\1\25\4\13"+
    "\1\150\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\124\4\1\2\13\1\151\20\13\1\124\1\13\1\207\1\1\2\13\1\150\1\105\1\13\1\151"+
    "\4\13\1\40\2\1\1\210\1\211\5\13\1\212\1\13\1\151\1\27\3\1\1\210\1\213\1\13"+
    "\1\31\1\1\3\13\1\145\1\211\2\13\1\145\1\1\1\114\1\1\1\214\1\42\1\13\1\40\1"+
    "\13\1\112\1\1\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\215\1\216\2\13\1\46"+
    "\1\1\1\217\1\114\1\13\1\220\3\13\1\221\1\222\1\223\1\30\1\66\1\224\1\225\1"+
    "\203\2\13\1\133\1\40\7\13\1\31\1\114\72\13\1\145\1\13\1\226\2\13\1\152\20"+
    "\1\26\13\1\151\6\13\1\77\2\1\1\112\1\227\1\56\1\230\1\231\6\13\1\16\1\1\1"+
    "\155\25\13\1\151\1\1\4\13\1\211\2\13\1\27\2\1\1\152\7\1\1\215\7\13\1\124\1"+
    "\1\1\114\1\25\1\30\1\25\1\30\1\232\4\13\1\150\1\233\1\234\2\1\1\235\1\13\1"+
    "\14\1\236\2\151\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\237\2\13\1\40\1\13\1\151\2\13\1\240\3\1\11\13\1\151\1\114\5\1\2\13\1\27"+
    "\3\13\1\145\11\1\23\13\1\112\1\13\1\40\1\27\11\1\1\241\2\13\1\242\1\13\1\40"+
    "\1\13\1\112\1\13\1\150\4\1\1\13\1\243\1\13\1\40\1\13\1\77\4\1\3\13\1\244\4"+
    "\1\1\71\1\245\1\13\1\145\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1"+
    "\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13"+
    "\1\31\60\1\1\155\2\13\1\27\2\1\1\65\1\1\1\155\2\13\2\1\1\13\1\46\1\114\1\155"+
    "\1\13\1\112\1\65\1\1\2\13\1\246\1\155\2\13\1\31\1\247\1\250\2\1\1\13\1\22"+
    "\1\152\5\1\1\251\1\252\1\46\2\13\1\150\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1"+
    "\253\1\16\21\1\3\13\1\1\1\254\1\114\12\1\2\13\1\150\2\1\1\255\2\1\3\13\1\1"+
    "\1\256\1\114\2\1\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114"+
    "\1\105\34\1\3\13\1\46\20\1\71\13\1\77\16\1\14\13\1\145\53\1\2\13\1\150\75"+
    "\1\44\13\1\112\33\1\43\13\1\46\1\13\1\150\1\114\6\1\1\13\1\151\1\1\3\13\1"+
    "\1\1\145\1\114\1\155\1\257\1\13\67\1\4\13\1\47\1\71\3\1\1\155\6\1\1\16\77"+
    "\1\6\13\1\30\1\124\1\46\1\77\66\1\5\13\1\215\3\13\1\144\1\260\1\261\1\262"+
    "\3\13\1\263\1\264\1\13\1\265\1\266\1\36\24\13\1\267\1\13\1\36\1\133\1\13\1"+
    "\133\1\13\1\215\1\13\1\215\1\150\1\13\1\150\1\13\1\56\1\13\1\56\1\13\1\270"+
    "\3\271\14\13\1\47\123\1\1\262\1\13\1\272\1\273\1\274\1\275\1\276\1\277\1\300"+
    "\1\152\1\301\1\152\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\151\150\13\1\16"+
    "\25\1\41\13\1\151\36\1");

  /* The ZZ_CMAP_A table has 3104 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\17\1\10\2\71\1\10\22\0\1\17\1\63\1\2\2\0\1\62\1\66\1\0\1\50\1\51\1"+
    "\60\1\56\1\45\1\57\1\44\1\7\12\3\1\43\1\42\1\65\1\55\1\64\1\54\1\70\32\4\1"+
    "\52\1\1\1\53\1\61\1\4\1\20\1\21\1\22\1\24\1\30\1\31\1\5\1\16\1\27\1\14\1\36"+
    "\1\32\1\25\1\35\1\15\1\23\1\33\1\4\1\13\1\11\1\12\1\34\1\37\1\41\1\40\1\26"+
    "\1\4\1\46\1\67\1\47\7\0\1\72\12\0\1\6\11\0\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1"+
    "\0\12\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\1\0\5\4\1\0\2\4\2\0\4\4\1\0\1\4"+
    "\6\0\1\4\1\0\3\4\1\0\1\4\1\0\4\4\1\0\23\4\1\0\13\4\10\0\6\4\1\0\26\4\2\0\1"+
    "\4\6\0\10\4\10\0\13\4\5\0\3\4\15\0\12\3\4\0\6\4\1\0\1\4\17\0\2\4\7\0\2\4\12"+
    "\3\3\4\2\0\2\4\1\0\16\4\15\0\11\4\13\0\1\4\16\0\12\3\6\4\4\0\2\4\4\0\1\4\5"+
    "\0\6\4\4\0\1\4\11\0\1\4\3\0\1\4\7\0\11\4\7\0\5\4\17\0\26\4\3\0\1\4\2\0\1\4"+
    "\7\0\12\4\4\0\12\3\1\4\4\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3"+
    "\0\1\4\20\0\1\4\15\0\2\4\1\0\1\4\5\0\6\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\17"+
    "\0\4\4\1\0\1\4\7\0\12\3\2\0\3\4\20\0\11\4\1\0\2\4\1\0\2\4\1\0\5\4\3\0\1\4"+
    "\2\0\1\4\30\0\1\4\13\0\10\4\2\0\1\4\3\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2"+
    "\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\13\0\10\4\1\0\2\4\10\0\3\4\5\0"+
    "\4\4\1\0\5\4\3\0\1\4\3\0\2\4\15\0\13\4\2\0\1\4\21\0\1\4\12\0\6\4\5\0\22\4"+
    "\3\0\10\4\1\0\11\4\1\0\1\4\2\0\7\4\11\0\1\4\1\0\2\4\14\0\12\3\7\0\2\4\1\0"+
    "\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2"+
    "\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0\1\4\11\0\12\3\2\0\14\4\1\0\24\4\13"+
    "\0\5\4\3\0\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0\3\4\4\0\15\4\14\0\1\4\1\0\6\4\1"+
    "\0\1\4\5\0\1\4\2\0\13\4\1\0\15\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\1\4\1"+
    "\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\16\4\2\0\6\4\2\0\15\4\2\0\1\4\1\6\17\4"+
    "\1\0\10\4\7\0\15\4\1\0\6\4\23\0\1\4\4\0\1\4\3\0\11\4\1\0\1\4\5\0\17\4\1\0"+
    "\16\4\2\0\14\4\13\0\1\4\15\0\7\4\7\0\16\4\15\0\2\4\12\3\3\0\3\4\11\0\4\4\1"+
    "\0\4\4\3\0\2\4\11\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\6\4\1\0\7\4\1\0\1\4\3"+
    "\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\13\6\15\0\2\72\5\0\1\6\17\0\1\6\1\0\1\4"+
    "\15\0\1\4\2\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\4\0\2\4\13\0\5\4\6\0\4\4\3\0\2\4"+
    "\14\0\10\4\7\0\10\4\1\0\7\4\1\0\1\6\4\0\2\4\12\0\5\4\5\0\2\4\3\0\7\4\6\0\3"+
    "\4\12\3\2\4\13\0\11\4\2\0\27\4\2\0\7\4\1\0\3\4\1\0\4\4\1\0\4\4\2\0\6\4\3\0"+
    "\1\4\1\0\1\4\2\0\5\4\1\0\12\4\12\3\5\4\1\0\3\4\1\0\10\4\4\0\7\4\3\0\1\4\3"+
    "\0\2\4\1\0\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\3\0\6\4\2\0\6\4\2"+
    "\0\6\4\11\0\7\4\4\0\5\4\3\0\5\4\5\0\1\4\1\0\10\4\1\0\5\4\1\0\1\4\1\0\2\4\1"+
    "\0\2\4\1\0\12\4\6\0\12\4\2\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0\14\4\1\0\16\4"+
    "\1\0\2\4\1\0\2\4\1\0\10\4\6\0\4\4\4\0\16\4\2\0\1\4\1\0\14\4\1\0\2\4\3\0\1"+
    "\4\2\0\4\4\1\0\2\4\12\0\10\4\6\0\6\4\1\0\3\4\1\0\12\4\3\0\1\4\12\0\4\4\13"+
    "\0\12\3\1\4\1\0\1\4\3\0\7\4\1\0\1\4\1\0\4\4\1\0\17\4\1\0\2\4\14\0\3\4\4\0"+
    "\2\4\1\0\1\4\20\0\4\4\10\0\1\4\13\0\10\4\5\0\3\4\2\0\1\4\2\0\2\4\2\0\4\4\1"+
    "\0\14\4\1\0\1\4\1\0\7\4\1\0\21\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\14\4\1\0\4\4"+
    "\1\0\5\4\1\0\1\4\3\0\14\4\2\0\13\4\1\0\10\4\2\0\22\3\1\0\2\4\1\0\1\4\2\0\1"+
    "\4\1\0\12\4\1\0\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3"+
    "\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4"+
    "\2\0\4\4\1\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4\1\0\5\4\1\0\3\4\1\0\5\4"+
    "\1\0\5\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\5\1\6\20\4"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\1\1\33\1\34\1\35"+
    "\2\2\5\4\1\36\11\4\1\37\1\40\3\4\1\41"+
    "\34\4\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\11\4\1\53\6\4\1\54\5\4\1\55"+
    "\2\4\1\56\20\4\1\57\2\4\1\60\1\4\1\61"+
    "\6\4\1\62\4\4\1\63\4\4\1\64\6\4\1\65"+
    "\5\4\1\66\1\4\1\67\4\4\1\70\2\4\1\71"+
    "\1\72\4\4\1\73\1\74\2\4\1\75\5\4\1\76"+
    "\6\4\1\77\1\4\1\100\7\4\1\101\1\4\1\102"+
    "\2\4\1\103\1\104\10\4\1\105\1\4\1\106\1\4"+
    "\1\107\2\4\1\110\1\111\4\4\1\112\2\4\1\113"+
    "\1\114\1\115\1\116\1\4\1\117\1\4\1\120\6\4"+
    "\1\121\1\4\1\122\1\123\1\124\1\4\1\0\1\125"+
    "\1\126\2\4\1\127\1\4\1\130\1\131\1\4\1\132"+
    "\3\4\1\133\1\4\1\134\1\135\1\136\2\4\1\137"+
    "\2\4\1\140\1\141\4\4\1\142\1\143\2\4\1\144"+
    "\1\145\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\166\0\166\0\u05c3\0\166\0\166\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\u05fe\0\166\0\u0639\0\166"+
    "\0\166\0\166\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\166"+
    "\0\166\0\166\0\u079b\0\166\0\u07d6\0\u0811\0\u084c\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0127\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0127\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\166\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\166\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u0127"+
    "\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u0127\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u0127\0\u1747\0\u1782\0\u0127"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u0127\0\u1b6d\0\u1ba8\0\u0127\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u0127\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u0127\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u0127\0\u2130\0\u216b"+
    "\0\u21a6\0\u21e1\0\u221c\0\u0127\0\u2257\0\u0127\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u0127\0\u237e\0\u23b9\0\u0127\0\u0127\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u0127\0\u0127\0\u24e0\0\u251b\0\u0127"+
    "\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u0127\0\u267d\0\u26b8"+
    "\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u0127\0\u27df\0\u0127\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u0127\0\u29b7"+
    "\0\u0127\0\u29f2\0\u2a2d\0\u0127\0\u0127\0\u2a68\0\u2aa3\0\u2ade"+
    "\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u0127\0\u2c40\0\u0127"+
    "\0\u2c7b\0\u0127\0\u2cb6\0\u2cf1\0\u2d2c\0\u0127\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u0127\0\u2e53\0\u2e8e\0\u2ec9\0\u0127\0\u0127"+
    "\0\u0127\0\u2f04\0\u0127\0\u2f3f\0\u0127\0\u2f7a\0\u2fb5\0\u2ff0"+
    "\0\u302b\0\u3066\0\u30a1\0\u0127\0\u30dc\0\u0127\0\u0127\0\u0127"+
    "\0\u3117\0\u3152\0\166\0\u0127\0\u318d\0\u31c8\0\u0127\0\u3203"+
    "\0\u0127\0\u0127\0\u323e\0\u0127\0\u3279\0\u32b4\0\u32ef\0\u0127"+
    "\0\u332a\0\u0127\0\u0127\0\u0127\0\u3365\0\u33a0\0\u0127\0\u33db"+
    "\0\u3416\0\u0127\0\u0127\0\u3451\0\u348c\0\u34c7\0\u3502\0\u0127"+
    "\0\u0127\0\u353d\0\u3578\0\u0127\0\u0127\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\1\6\1\7\1\10\1\11\1\10"+
    "\1\12\1\13\1\14\1\15\1\16\1\6\1\10\1\3"+
    "\1\17\1\20\1\6\1\21\1\22\3\6\1\23\1\6"+
    "\1\24\1\6\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\2\10\10\61"+
    "\1\3\7\61\1\62\50\61\2\3\73\0\1\4\1\63"+
    "\1\64\70\4\3\0\1\5\72\0\3\6\3\0\6\6"+
    "\2\0\21\6\34\0\3\6\3\0\3\6\1\65\2\6"+
    "\2\0\1\66\1\6\1\67\1\6\1\70\6\6\1\71"+
    "\5\6\37\0\1\10\1\0\1\10\6\0\1\10\51\0"+
    "\2\10\7\0\1\72\66\0\3\6\3\0\1\6\1\73"+
    "\4\6\2\0\2\6\1\74\5\6\1\75\10\6\34\0"+
    "\3\6\3\0\2\6\1\76\1\77\2\6\2\0\1\100"+
    "\4\6\1\101\1\102\12\6\34\0\3\6\3\0\6\6"+
    "\2\0\10\6\1\103\10\6\34\0\2\6\1\104\3\0"+
    "\4\6\1\105\1\6\2\0\14\6\1\106\4\6\34\0"+
    "\3\6\3\0\6\6\2\0\1\107\7\6\1\110\10\6"+
    "\34\0\3\6\3\0\1\111\1\112\2\6\1\113\1\6"+
    "\2\0\1\6\1\114\1\6\1\115\1\116\14\6\34\0"+
    "\3\6\3\0\2\6\1\117\1\120\2\6\2\0\2\6"+
    "\1\121\1\6\1\122\14\6\34\0\3\6\3\0\2\6"+
    "\1\123\3\6\2\0\1\124\1\6\1\125\16\6\34\0"+
    "\3\6\3\0\6\6\2\0\2\6\1\126\5\6\1\127"+
    "\10\6\34\0\3\6\3\0\4\6\1\130\1\6\2\0"+
    "\4\6\1\131\14\6\34\0\3\6\3\0\2\6\1\132"+
    "\3\6\2\0\1\133\12\6\1\134\5\6\34\0\3\6"+
    "\3\0\6\6\2\0\1\135\20\6\34\0\3\6\3\0"+
    "\1\136\5\6\2\0\2\6\1\137\16\6\34\0\3\6"+
    "\3\0\6\6\2\0\1\140\7\6\1\141\10\6\34\0"+
    "\3\6\3\0\6\6\2\0\14\6\1\142\4\6\34\0"+
    "\3\6\3\0\3\6\1\143\2\6\2\0\2\6\1\144"+
    "\3\6\1\145\12\6\75\0\1\146\103\0\1\147\101\0"+
    "\1\150\63\0\1\151\72\0\1\152\72\0\1\153\1\0"+
    "\1\154\101\0\1\155\73\0\1\156\3\0\1\4\1\63"+
    "\71\4\3\0\3\6\3\0\4\6\1\157\1\6\2\0"+
    "\21\6\34\0\3\6\3\0\3\6\1\160\2\6\2\0"+
    "\21\6\34\0\3\6\3\0\2\6\1\161\3\6\2\0"+
    "\21\6\34\0\3\6\3\0\6\6\2\0\2\6\1\162"+
    "\16\6\34\0\3\6\3\0\4\6\1\163\1\6\2\0"+
    "\21\6\31\0\10\72\1\0\62\72\3\0\3\6\3\0"+
    "\2\6\1\164\3\6\2\0\21\6\34\0\3\6\3\0"+
    "\6\6\2\0\14\6\1\165\4\6\34\0\3\6\3\0"+
    "\2\6\1\166\3\6\2\0\21\6\34\0\3\6\3\0"+
    "\6\6\2\0\1\167\4\6\1\170\13\6\34\0\3\6"+
    "\3\0\6\6\2\0\14\6\1\171\4\6\34\0\3\6"+
    "\3\0\6\6\2\0\1\6\1\172\17\6\34\0\3\6"+
    "\3\0\6\6\2\0\12\6\1\173\6\6\34\0\3\6"+
    "\3\0\2\6\1\174\3\6\2\0\21\6\34\0\3\6"+
    "\3\0\1\175\1\176\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\1\6\1\177\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\12\6\1\200\6\6\34\0\3\6"+
    "\3\0\1\6\1\201\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\17\6\1\202\1\6\34\0\3\6"+
    "\3\0\1\6\1\203\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\4\6\1\204\1\6\2\0\5\6\1\205\13\6"+
    "\34\0\3\6\3\0\6\6\2\0\2\6\1\206\16\6"+
    "\34\0\3\6\3\0\1\6\1\207\4\6\2\0\21\6"+
    "\34\0\3\6\3\0\6\6\2\0\4\6\1\210\14\6"+
    "\34\0\3\6\3\0\6\6\2\0\10\6\1\211\10\6"+
    "\34\0\3\6\3\0\4\6\1\212\1\6\2\0\21\6"+
    "\34\0\3\6\3\0\6\6\2\0\2\6\1\213\16\6"+
    "\34\0\3\6\3\0\6\6\2\0\2\6\1\214\16\6"+
    "\34\0\3\6\3\0\6\6\2\0\10\6\1\215\10\6"+
    "\34\0\3\6\3\0\1\6\1\216\4\6\2\0\21\6"+
    "\34\0\3\6\3\0\4\6\1\217\1\6\2\0\21\6"+
    "\34\0\3\6\3\0\6\6\2\0\3\6\1\220\15\6"+
    "\34\0\3\6\3\0\4\6\1\221\1\6\2\0\21\6"+
    "\34\0\3\6\3\0\6\6\2\0\7\6\1\222\3\6"+
    "\1\223\5\6\34\0\3\6\3\0\1\224\5\6\2\0"+
    "\21\6\34\0\3\6\3\0\3\6\1\225\2\6\2\0"+
    "\21\6\34\0\3\6\3\0\2\6\1\226\3\6\2\0"+
    "\3\6\1\227\15\6\34\0\3\6\3\0\6\6\2\0"+
    "\1\6\1\230\17\6\34\0\3\6\3\0\6\6\2\0"+
    "\12\6\1\231\6\6\34\0\3\6\3\0\6\6\2\0"+
    "\2\6\1\232\16\6\34\0\3\6\3\0\3\6\1\233"+
    "\2\6\2\0\21\6\34\0\3\6\3\0\2\6\1\234"+
    "\3\6\2\0\21\6\34\0\3\6\3\0\2\6\1\235"+
    "\3\6\2\0\21\6\34\0\3\6\3\0\6\6\2\0"+
    "\4\6\1\236\14\6\34\0\3\6\3\0\1\6\1\237"+
    "\4\6\2\0\21\6\34\0\3\6\3\0\2\6\1\240"+
    "\3\6\2\0\21\6\34\0\3\6\3\0\3\6\1\241"+
    "\2\6\2\0\21\6\34\0\3\6\3\0\6\6\2\0"+
    "\1\242\20\6\34\0\3\6\3\0\6\6\2\0\4\6"+
    "\1\243\14\6\34\0\3\6\3\0\6\6\2\0\10\6"+
    "\1\244\1\245\7\6\34\0\3\6\3\0\6\6\2\0"+
    "\1\246\20\6\34\0\3\6\3\0\6\6\2\0\3\6"+
    "\1\247\15\6\34\0\3\6\3\0\3\6\1\250\2\6"+
    "\2\0\13\6\1\251\5\6\34\0\3\6\3\0\6\6"+
    "\2\0\10\6\1\252\10\6\34\0\3\6\3\0\6\6"+
    "\2\0\16\6\1\253\2\6\34\0\3\6\3\0\4\6"+
    "\1\254\1\6\2\0\21\6\34\0\3\6\3\0\6\6"+
    "\2\0\10\6\1\255\10\6\34\0\3\6\3\0\6\6"+
    "\2\0\4\6\1\256\14\6\34\0\3\6\3\0\6\6"+
    "\2\0\10\6\1\257\10\6\34\0\3\6\3\0\6\6"+
    "\2\0\2\6\1\260\16\6\34\0\3\6\3\0\6\6"+
    "\2\0\2\6\1\261\16\6\34\0\3\6\3\0\2\6"+
    "\1\262\3\6\2\0\13\6\1\263\5\6\34\0\3\6"+
    "\3\0\6\6\2\0\2\6\1\264\16\6\34\0\3\6"+
    "\3\0\3\6\1\265\2\6\2\0\21\6\34\0\3\6"+
    "\3\0\1\6\1\266\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\1\267\20\6\34\0\3\6\3\0"+
    "\6\6\2\0\2\6\1\270\16\6\34\0\3\6\3\0"+
    "\2\6\1\271\3\6\2\0\21\6\34\0\3\6\3\0"+
    "\3\6\1\272\2\6\2\0\21\6\34\0\3\6\3\0"+
    "\6\6\2\0\1\273\20\6\34\0\3\6\3\0\6\6"+
    "\2\0\7\6\1\274\11\6\34\0\3\6\3\0\6\6"+
    "\2\0\4\6\1\275\14\6\34\0\3\6\3\0\6\6"+
    "\2\0\1\6\1\276\17\6\34\0\3\6\3\0\6\6"+
    "\2\0\1\277\20\6\34\0\3\6\3\0\6\6\2\0"+
    "\3\6\1\300\15\6\34\0\3\6\3\0\1\301\3\6"+
    "\1\302\1\6\2\0\21\6\34\0\3\6\3\0\6\6"+
    "\2\0\11\6\1\303\7\6\34\0\3\6\3\0\5\6"+
    "\1\304\2\0\21\6\34\0\3\6\3\0\6\6\2\0"+
    "\12\6\1\305\6\6\34\0\3\6\3\0\6\6\2\0"+
    "\14\6\1\306\4\6\34\0\3\6\3\0\6\6\2\0"+
    "\10\6\1\307\10\6\34\0\3\6\3\0\6\6\2\0"+
    "\16\6\1\310\2\6\34\0\3\6\3\0\6\6\2\0"+
    "\1\311\20\6\34\0\3\6\3\0\6\6\2\0\11\6"+
    "\1\312\7\6\34\0\3\6\3\0\6\6\2\0\4\6"+
    "\1\313\14\6\34\0\3\6\3\0\4\6\1\314\1\6"+
    "\2\0\21\6\34\0\3\6\3\0\4\6\1\315\1\6"+
    "\2\0\21\6\34\0\3\6\3\0\1\316\5\6\2\0"+
    "\21\6\34\0\3\6\3\0\4\6\1\317\1\6\2\0"+
    "\21\6\34\0\3\6\3\0\6\6\2\0\6\6\1\320"+
    "\12\6\34\0\3\6\3\0\6\6\2\0\11\6\1\321"+
    "\7\6\34\0\3\6\3\0\6\6\2\0\4\6\1\322"+
    "\14\6\34\0\3\6\3\0\6\6\2\0\4\6\1\323"+
    "\14\6\34\0\3\6\3\0\6\6\2\0\10\6\1\324"+
    "\10\6\34\0\3\6\3\0\6\6\2\0\1\325\20\6"+
    "\34\0\3\6\3\0\1\6\1\326\4\6\2\0\21\6"+
    "\34\0\3\6\3\0\1\6\1\327\4\6\2\0\21\6"+
    "\34\0\3\6\3\0\4\6\1\330\1\6\2\0\21\6"+
    "\34\0\3\6\3\0\6\6\2\0\3\6\1\331\15\6"+
    "\34\0\3\6\3\0\3\6\1\332\2\6\2\0\21\6"+
    "\34\0\3\6\3\0\1\333\5\6\2\0\21\6\34\0"+
    "\3\6\3\0\6\6\2\0\2\6\1\334\16\6\34\0"+
    "\3\6\3\0\6\6\2\0\10\6\1\335\10\6\34\0"+
    "\3\6\3\0\6\6\2\0\2\6\1\336\16\6\34\0"+
    "\3\6\3\0\6\6\2\0\20\6\1\337\34\0\3\6"+
    "\3\0\6\6\2\0\13\6\1\340\5\6\34\0\3\6"+
    "\3\0\3\6\1\341\2\6\2\0\21\6\34\0\3\6"+
    "\3\0\2\6\1\342\3\6\2\0\21\6\34\0\3\6"+
    "\3\0\2\6\1\343\3\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\16\6\1\344\2\6\34\0\3\6"+
    "\3\0\6\6\2\0\3\6\1\345\15\6\34\0\3\6"+
    "\3\0\1\6\1\346\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\1\6\1\347\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\2\6\1\350\16\6\34\0\3\6"+
    "\3\0\6\6\2\0\11\6\1\351\7\6\34\0\3\6"+
    "\3\0\6\6\2\0\10\6\1\352\10\6\34\0\3\6"+
    "\3\0\1\6\1\353\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\6\6\1\354\12\6\34\0\3\6"+
    "\3\0\1\6\1\355\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\10\6\1\356\10\6\34\0\3\6"+
    "\3\0\1\6\1\357\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\2\6\1\360\16\6\34\0\3\6"+
    "\3\0\6\6\2\0\1\361\20\6\34\0\3\6\3\0"+
    "\6\6\2\0\14\6\1\362\4\6\34\0\3\6\3\0"+
    "\6\6\2\0\1\363\20\6\34\0\3\6\3\0\3\6"+
    "\1\364\2\6\2\0\21\6\34\0\3\6\3\0\3\6"+
    "\1\365\2\6\2\0\21\6\34\0\3\6\3\0\1\366"+
    "\5\6\2\0\21\6\34\0\3\6\3\0\6\6\2\0"+
    "\10\6\1\367\10\6\34\0\3\6\3\0\6\6\2\0"+
    "\10\6\1\370\10\6\34\0\3\6\3\0\6\6\2\0"+
    "\4\6\1\371\14\6\34\0\3\6\3\0\6\6\2\0"+
    "\7\6\1\372\11\6\34\0\3\6\3\0\6\6\2\0"+
    "\3\6\1\373\15\6\34\0\3\6\3\0\3\6\1\374"+
    "\2\6\2\0\21\6\34\0\3\6\3\0\5\6\1\375"+
    "\2\0\21\6\34\0\3\6\3\0\1\6\1\376\4\6"+
    "\2\0\21\6\34\0\3\6\3\0\6\6\2\0\3\6"+
    "\1\377\15\6\34\0\2\6\1\u0100\3\0\6\6\2\0"+
    "\1\u0101\20\6\34\0\3\6\3\0\6\6\2\0\13\6"+
    "\1\u0102\5\6\34\0\2\6\1\u0103\3\0\6\6\2\0"+
    "\21\6\34\0\3\6\3\0\2\6\1\u0104\3\6\2\0"+
    "\21\6\34\0\3\6\3\0\6\6\2\0\10\6\1\u0105"+
    "\10\6\34\0\3\6\3\0\4\6\1\u0106\1\6\2\0"+
    "\21\6\34\0\3\6\3\0\1\6\1\u0107\4\6\2\0"+
    "\21\6\34\0\3\6\3\0\6\6\2\0\10\6\1\u0108"+
    "\10\6\34\0\3\6\3\0\6\6\2\0\6\6\1\u0109"+
    "\12\6\34\0\3\6\3\0\6\6\2\0\1\u010a\20\6"+
    "\34\0\3\6\3\0\4\6\1\u010b\1\6\2\0\21\6"+
    "\34\0\3\6\3\0\6\6\2\0\1\u010c\20\6\34\0"+
    "\3\6\3\0\6\6\2\0\10\6\1\u010d\10\6\34\0"+
    "\3\6\3\0\6\6\2\0\3\6\1\u010e\15\6\34\0"+
    "\3\6\3\0\6\6\2\0\6\6\1\u010f\12\6\34\0"+
    "\3\6\3\0\3\6\1\u0110\2\6\2\0\21\6\34\0"+
    "\3\6\3\0\1\6\1\u0111\4\6\2\0\21\6\34\0"+
    "\3\6\3\0\6\6\2\0\10\6\1\u0112\10\6\34\0"+
    "\3\6\3\0\5\6\1\u0113\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\3\6\1\u0114\15\6\34\0\3\6"+
    "\3\0\6\6\2\0\2\6\1\u0115\16\6\34\0\3\6"+
    "\3\0\2\6\1\u0116\3\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\5\6\1\u0117\13\6\34\0\3\6"+
    "\3\0\6\6\2\0\6\6\1\u0118\12\6\34\0\3\6"+
    "\3\0\6\6\2\0\2\6\1\u0119\16\6\34\0\3\6"+
    "\2\0\1\u011a\6\6\1\u011a\1\u011b\21\6\27\0\1\u011a"+
    "\4\0\3\6\3\0\6\6\2\0\10\6\1\u011c\10\6"+
    "\34\0\3\6\3\0\6\6\2\0\2\6\1\u011d\16\6"+
    "\34\0\3\6\3\0\6\6\2\0\3\6\1\u011e\15\6"+
    "\34\0\3\6\3\0\1\6\1\u011f\4\6\2\0\21\6"+
    "\34\0\3\6\3\0\6\6\2\0\3\6\1\u0120\15\6"+
    "\34\0\3\6\3\0\1\u0121\5\6\2\0\21\6\34\0"+
    "\3\6\3\0\1\u0122\5\6\2\0\21\6\34\0\3\6"+
    "\3\0\1\6\1\u0123\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\4\6\1\u0124\1\6\2\0\21\6\34\0\3\6"+
    "\3\0\1\6\1\u0125\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\2\6\1\u0126\16\6\34\0\3\6"+
    "\3\0\4\6\1\u0127\1\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\10\6\1\u0128\10\6\34\0\3\6"+
    "\3\0\1\6\1\u0129\4\6\2\0\21\6\34\0\3\6"+
    "\3\0\6\6\2\0\10\6\1\u012a\10\6\34\0\3\6"+
    "\3\0\4\6\1\u012b\1\6\2\0\21\6\34\0\3\6"+
    "\3\0\4\6\1\u012c\1\6\2\0\21\6\41\0\1\u011a"+
    "\6\0\1\u011a\1\u011b\50\0\1\u011a\4\0\3\6\3\0"+
    "\2\6\1\u012d\3\6\2\0\21\6\34\0\3\6\3\0"+
    "\1\6\1\u012e\4\6\2\0\21\6\34\0\3\6\3\0"+
    "\6\6\2\0\10\6\1\u012f\10\6\34\0\3\6\3\0"+
    "\3\6\1\u0130\2\6\2\0\21\6\34\0\3\6\3\0"+
    "\6\6\2\0\2\6\1\u0131\16\6\34\0\2\6\1\u0132"+
    "\3\0\6\6\2\0\21\6\34\0\3\6\3\0\1\6"+
    "\1\u0133\4\6\2\0\21\6\34\0\3\6\3\0\6\6"+
    "\2\0\10\6\1\u0134\10\6\34\0\3\6\3\0\6\6"+
    "\2\0\14\6\1\u0135\4\6\34\0\3\6\3\0\3\6"+
    "\1\u0136\2\6\2\0\21\6\34\0\3\6\3\0\6\6"+
    "\2\0\2\6\1\u0137\16\6\34\0\3\6\3\0\2\6"+
    "\1\u0138\3\6\2\0\21\6\34\0\3\6\3\0\2\6"+
    "\1\u0139\3\6\2\0\21\6\34\0\3\6\3\0\6\6"+
    "\2\0\10\6\1\u013a\10\6\34\0\3\6\3\0\6\6"+
    "\2\0\2\6\1\u013b\16\6\34\0\3\6\3\0\4\6"+
    "\1\u013c\1\6\2\0\21\6\34\0\3\6\3\0\2\6"+
    "\1\u013d\3\6\2\0\21\6\34\0\3\6\3\0\4\6"+
    "\1\u013e\1\6\2\0\21\6\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13747];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\26\1\2\11\1\1\10\11\1\1\1\11"+
    "\1\1\3\11\5\1\3\11\1\1\1\11\61\1\11\11"+
    "\253\1\1\0\1\11\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean inTemplate = false;
  public BallerinaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BallerinaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 103: break;
          case 2: 
            { return QUOTEDSTRINGLITERAL;
            }
          case 104: break;
          case 3: 
            { return INTEGERLITERAL;
            }
          case 105: break;
          case 4: 
            { return IDENTIFIER;
            }
          case 106: break;
          case 5: 
            { return WHITE_SPACE;
            }
          case 107: break;
          case 6: 
            { return DIV;
            }
          case 108: break;
          case 7: 
            { return SEMICOLON;
            }
          case 109: break;
          case 8: 
            { return COLON;
            }
          case 110: break;
          case 9: 
            { return DOT;
            }
          case 111: break;
          case 10: 
            { return COMMA;
            }
          case 112: break;
          case 11: 
            { return LEFT_BRACE;
            }
          case 113: break;
          case 12: 
            { return RIGHT_BRACE;
            }
          case 114: break;
          case 13: 
            { return LEFT_PARENTHESIS;
            }
          case 115: break;
          case 14: 
            { return RIGHT_PARENTHESIS;
            }
          case 116: break;
          case 15: 
            { return LEFT_BRACKET;
            }
          case 117: break;
          case 16: 
            { return RIGHT_BRACKET;
            }
          case 118: break;
          case 17: 
            { return QUESTION_MARK;
            }
          case 119: break;
          case 18: 
            { return ASSIGN;
            }
          case 120: break;
          case 19: 
            { return ADD;
            }
          case 121: break;
          case 20: 
            { return SUB;
            }
          case 122: break;
          case 21: 
            { return MUL;
            }
          case 123: break;
          case 22: 
            { return POW;
            }
          case 124: break;
          case 23: 
            { return MOD;
            }
          case 125: break;
          case 24: 
            { return NOT;
            }
          case 126: break;
          case 25: 
            { return GT;
            }
          case 127: break;
          case 26: 
            { return LT;
            }
          case 128: break;
          case 27: 
            { return AT;
            }
          case 129: break;
          case 28: 
            { inTemplate = false; return BAD_CHARACTER;
            }
          case 130: break;
          case 29: 
            { inTemplate = false; yybegin(YYINITIAL); return STRINGTEMPLATELITERALEND;
            }
          case 131: break;
          case 30: 
            { return LINE_COMMENT;
            }
          case 132: break;
          case 31: 
            { return IF;
            }
          case 133: break;
          case 32: 
            { return IN;
            }
          case 134: break;
          case 33: 
            { return AS;
            }
          case 135: break;
          case 34: 
            { return RANGE;
            }
          case 136: break;
          case 35: 
            { return EQUAL;
            }
          case 137: break;
          case 36: 
            { return RARROW;
            }
          case 138: break;
          case 37: 
            { return NOT_EQUAL;
            }
          case 139: break;
          case 38: 
            { return GT_EQUAL;
            }
          case 140: break;
          case 39: 
            { return LT_EQUAL;
            }
          case 141: break;
          case 40: 
            { return LARROW;
            }
          case 142: break;
          case 41: 
            { return AND;
            }
          case 143: break;
          case 42: 
            { return OR;
            }
          case 144: break;
          case 43: 
            { return TRY;
            }
          case 145: break;
          case 44: 
            { return INT;
            }
          case 146: break;
          case 45: 
            { return ANY;
            }
          case 147: break;
          case 46: 
            { return ALL;
            }
          case 148: break;
          case 47: 
            { return MAP;
            }
          case 149: break;
          case 48: 
            { return VAR;
            }
          case 150: break;
          case 49: 
            { return XML;
            }
          case 151: break;
          case 50: 
            { return FORK;
            }
          case 152: break;
          case 51: 
            { return SOME;
            }
          case 153: break;
          case 52: 
            { return TYPE;
            }
          case 154: break;
          case 53: 
            { return NEXT;
            }
          case 155: break;
          case 54: 
            { return BIND;
            }
          case 156: break;
          case 55: 
            { return BLOB;
            }
          case 157: break;
          case 56: 
            { return LOCK;
            }
          case 158: break;
          case 57: 
            { return ENUM;
            }
          case 159: break;
          case 58: 
            { return ELSE;
            }
          case 160: break;
          case 59: 
            { return JSON;
            }
          case 161: break;
          case 60: 
            { return JOIN;
            }
          case 162: break;
          case 61: 
            { return WITH;
            }
          case 163: break;
          case 62: 
            { return FLOAT;
            }
          case 164: break;
          case 63: 
            { return TABLE;
            }
          case 165: break;
          case 64: 
            { return THROW;
            }
          case 166: break;
          case 65: 
            { return ABORT;
            }
          case 167: break;
          case 66: 
            { return BREAK;
            }
          case 168: break;
          case 67: 
            { return CATCH;
            }
          case 169: break;
          case 68: 
            { return CONST;
            }
          case 170: break;
          case 69: 
            { return XMLNS;
            }
          case 171: break;
          case 70: 
            { return WHILE;
            }
          case 172: break;
          case 71: 
            { return FAILED;
            }
          case 173: break;
          case 72: 
            { return STRING;
            }
          case 174: break;
          case 73: 
            { return STRUCT;
            }
          case 175: break;
          case 74: 
            { return TYPEOF;
            }
          case 176: break;
          case 75: 
            { return RETURN;
            }
          case 177: break;
          case 76: 
            { return IMPORT;
            }
          case 178: break;
          case 77: 
            { return NATIVE;
            }
          case 179: break;
          case 78: 
            { return ATTACH;
            }
          case 180: break;
          case 79: 
            { return ACTION;
            }
          case 181: break;
          case 80: 
            { return CREATE;
            }
          case 182: break;
          case 81: 
            { return PUBLIC;
            }
          case 183: break;
          case 82: 
            { return WORKER;
            }
          case 184: break;
          case 83: 
            { return FINALLY;
            }
          case 185: break;
          case 84: 
            { return FOREACH;
            }
          case 186: break;
          case 85: 
            { inTemplate = true; yybegin(STRING_TEMPLATE); return STRINGTEMPLATELITERALSTART;
            }
          case 187: break;
          case 86: 
            { return SERVICE;
            }
          case 188: break;
          case 87: 
            { return TIMEOUT;
            }
          case 189: break;
          case 88: 
            { return RETRIES;
            }
          case 190: break;
          case 89: 
            { return RETURNS;
            }
          case 191: break;
          case 90: 
            { return BOOLEAN;
            }
          case 192: break;
          case 91: 
            { return PRIVATE;
            }
          case 193: break;
          case 92: 
            { return PACKAGE;
            }
          case 194: break;
          case 93: 
            { return VERSION;
            }
          case 195: break;
          case 94: 
            { return FUNCTION;
            }
          case 196: break;
          case 95: 
            { return RESOURCE;
            }
          case 197: break;
          case 96: 
            { return LENGTHOF;
            }
          case 198: break;
          case 97: 
            { return ENDPOINT;
            }
          case 199: break;
          case 98: 
            { return CONNECTOR;
            }
          case 200: break;
          case 99: 
            { return TYPE_PARAMETER;
            }
          case 201: break;
          case 100: 
            { return ANNOTATION;
            }
          case 202: break;
          case 101: 
            { return TRANSFORMER;
            }
          case 203: break;
          case 102: 
            { return TRANSACTION;
            }
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
