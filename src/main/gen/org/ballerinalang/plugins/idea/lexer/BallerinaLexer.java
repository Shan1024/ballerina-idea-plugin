/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.ballerinalang.plugins.idea.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ballerinalang.plugins.idea.psi.BallerinaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Ballerina.flex</tt>
 */
public class BallerinaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int XML_MODE = 2;
  public static final int XML_TAG_MODE = 4;
  public static final int DOUBLE_QUOTED_XML_STRING_MODE = 6;
  public static final int SINGLE_QUOTED_XML_STRING_MODE = 8;
  public static final int XML_PI_MODE = 10;
  public static final int XML_COMMENT_MODE = 12;
  public static final int STRING_TEMPLATE_MODE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15008 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\35\1\36\3\11\1\37\10\11\1\40\1\41\20\11\1\42\2\11"+
    "\1\43\5\11\1\44\4\11\1\45\1\46\4\11\51\35\1\47\3\35\1\50\1\51\4\35\1\52\12"+
    "\11\1\53\u0381\11");

  /* The ZZ_CMAP_Y table has 2816 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\20\1\21\1\22\1\13\1\23\4\13\1\24\10\13\1\25\12\13"+
    "\1\26\1\13\1\27\1\26\1\13\1\30\4\1\1\13\1\31\1\32\2\1\2\13\1\31\1\1\1\33\1"+
    "\26\5\13\1\34\1\35\1\36\1\1\1\37\1\13\1\1\1\40\5\13\1\41\1\42\1\43\1\13\1"+
    "\31\1\44\1\13\1\45\1\46\1\1\1\13\1\47\4\1\1\13\1\50\4\1\1\51\2\13\1\52\1\1"+
    "\1\53\1\54\1\26\1\55\1\56\1\57\1\60\1\61\1\62\1\54\1\16\1\63\1\56\1\57\1\64"+
    "\1\1\1\65\1\66\1\67\1\70\1\23\1\57\1\71\1\1\1\72\1\54\1\73\1\74\1\56\1\57"+
    "\1\71\1\1\1\62\1\54\1\42\1\75\1\76\1\77\1\100\1\1\1\72\1\66\1\1\1\101\1\37"+
    "\1\57\1\52\1\1\1\102\1\54\1\1\1\101\1\37\1\57\1\103\1\1\1\61\1\54\1\104\1"+
    "\101\1\37\1\13\1\105\1\61\1\106\1\54\1\107\1\110\1\111\1\13\1\112\1\113\1"+
    "\1\1\66\1\1\1\26\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\2\1\1\72\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\31\1\106"+
    "\1\115\1\127\1\130\1\131\1\132\1\115\2\13\1\133\2\13\1\134\24\13\1\135\1\136"+
    "\2\13\1\135\2\13\1\137\1\140\1\14\3\13\1\140\3\13\1\31\2\1\1\13\1\1\5\13\1"+
    "\141\1\26\45\13\1\142\1\13\1\143\1\31\4\13\1\31\1\144\1\145\1\16\1\13\1\16"+
    "\1\13\1\16\1\145\1\72\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\30\2\13"+
    "\1\150\4\13\1\41\1\13\1\151\2\1\1\66\1\13\1\152\1\50\2\13\1\153\1\13\1\100"+
    "\1\115\2\1\1\13\1\113\3\13\1\50\2\1\2\115\1\154\5\1\1\110\2\13\1\146\1\155"+
    "\1\115\2\1\1\156\1\13\1\157\1\43\2\13\1\41\1\1\2\13\1\146\1\1\1\160\1\43\1"+
    "\13\1\152\6\1\1\161\1\162\14\13\4\1\21\13\1\141\2\13\1\141\1\163\1\13\1\152"+
    "\3\13\1\164\1\165\1\166\1\125\1\165\1\167\1\1\1\170\1\171\1\172\1\173\1\1"+
    "\1\174\1\175\1\176\6\175\1\177\1\200\1\201\1\202\1\203\3\175\1\204\147\1\2"+
    "\205\1\206\2\205\1\206\10\205\1\207\1\210\2\205\1\211\3\205\1\212\1\175\1"+
    "\205\1\213\4\214\4\175\1\215\34\175\1\1\1\216\2\175\1\217\1\220\4\205\1\221"+
    "\1\220\4\205\1\222\1\223\1\205\1\224\1\220\4\205\1\206\1\175\1\205\1\225\3"+
    "\175\1\205\40\175\133\205\1\226\4\175\135\205\1\226\2\175\10\205\1\176\4\175"+
    "\2\205\1\224\20\205\1\176\1\205\1\227\1\175\2\205\1\206\1\215\1\205\1\224"+
    "\4\205\1\226\2\175\1\230\1\231\5\205\1\232\1\205\1\224\1\233\3\175\1\230\1"+
    "\234\1\205\1\235\1\175\3\205\1\236\1\231\2\205\1\236\1\175\1\237\1\175\1\240"+
    "\1\241\1\205\1\226\1\205\1\213\1\175\1\205\1\176\1\242\2\205\1\235\1\215\1"+
    "\237\1\243\1\244\2\205\1\245\1\175\1\246\1\237\1\205\1\247\3\205\1\250\1\251"+
    "\1\252\1\225\1\253\1\254\1\255\1\214\2\205\1\222\1\226\7\205\1\235\1\237\72"+
    "\205\1\236\1\205\1\256\2\205\1\257\20\1\26\205\1\224\6\205\1\260\2\175\1\213"+
    "\1\261\1\262\1\263\1\264\6\205\1\265\1\175\1\266\25\205\1\224\1\175\4\205"+
    "\1\231\2\205\1\233\2\1\1\257\7\175\1\243\7\205\1\176\1\175\1\237\1\220\1\225"+
    "\1\220\1\225\1\267\4\205\1\206\1\270\1\271\1\175\1\272\1\273\1\13\1\14\1\274"+
    "\2\152\2\1\7\13\1\31\30\1\1\13\1\125\3\13\1\72\2\1\2\13\1\1\1\13\1\275\2\13"+
    "\1\41\1\13\1\152\2\13\1\276\3\1\11\13\1\152\1\115\5\1\2\13\1\30\3\13\1\146"+
    "\11\1\23\13\1\113\1\13\1\41\1\30\11\1\1\277\2\13\1\300\1\13\1\41\1\13\1\113"+
    "\1\13\1\151\4\1\1\13\1\301\1\13\1\41\1\13\1\100\4\1\3\13\1\302\4\1\1\72\1"+
    "\303\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2\1\1\124\1\13\1\50\1\1\3\13\1\41"+
    "\1\13\1\41\1\13\1\32\1\13\1\16\6\1\4\13\1\47\3\1\3\13\1\32\3\13\1\32\60\1"+
    "\1\156\2\13\1\30\2\1\1\66\1\1\1\156\2\13\2\1\1\13\1\47\1\115\1\156\1\13\1"+
    "\113\1\66\1\1\2\13\1\304\1\156\2\13\1\32\1\305\1\306\2\1\1\13\1\23\1\153\5"+
    "\1\1\307\1\310\1\47\2\13\1\151\1\1\1\115\1\74\1\56\1\57\1\71\1\1\1\311\1\16"+
    "\21\1\3\13\1\1\1\312\1\115\12\1\2\13\1\151\2\1\1\313\2\1\3\13\1\1\1\314\1"+
    "\115\2\1\2\13\1\31\1\1\1\115\3\1\1\13\1\100\1\1\1\115\26\1\4\13\1\115\1\106"+
    "\34\1\3\13\1\47\20\1\71\13\1\100\16\1\14\13\1\146\53\1\102\13\1\151\75\1\44"+
    "\13\1\113\33\1\43\13\1\47\1\13\1\151\1\115\6\1\1\13\1\152\1\1\3\13\1\1\1\146"+
    "\1\115\1\156\1\315\1\13\67\1\4\13\1\50\1\72\3\1\1\156\6\1\1\16\77\1\6\13\1"+
    "\31\1\125\1\47\1\100\66\1\5\13\1\316\3\13\1\145\1\317\1\320\1\321\3\13\1\322"+
    "\1\323\1\13\1\324\1\325\1\37\24\13\1\326\1\13\1\37\1\134\1\13\1\134\1\13\1"+
    "\316\1\13\1\316\1\151\1\13\1\151\1\13\1\57\1\13\1\57\1\13\1\327\3\330\14\13"+
    "\1\50\123\1\1\321\1\13\1\331\1\332\1\333\1\334\1\335\1\336\1\337\1\153\1\340"+
    "\1\153\24\1\55\13\1\113\2\1\103\13\1\50\15\13\1\152\150\13\1\16\25\1\41\13"+
    "\1\152\36\1");

  /* The ZZ_CMAP_A table has 3600 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\17\1\13\2\41\1\13\22\0\1\17\1\32\1\3\1\47\1\0\1\105\1\45\1\2\1\100"+
    "\1\101\1\103\1\102\1\77\1\33\1\54\1\12\12\4\1\51\1\46\1\31\1\52\1\44\1\50"+
    "\1\107\1\37\1\53\1\35\1\36\2\53\15\56\1\40\6\56\1\34\1\1\1\43\1\104\1\7\1"+
    "\20\1\61\1\62\1\64\1\67\1\70\1\6\1\26\1\66\1\24\1\74\1\71\1\16\1\15\1\25\1"+
    "\63\1\72\1\56\1\23\1\21\1\22\1\73\1\75\1\76\1\14\1\65\1\56\1\27\1\106\1\30"+
    "\7\0\1\42\12\0\1\11\11\0\1\5\12\0\1\5\1\0\1\55\2\0\1\5\5\0\27\5\1\0\12\5\4"+
    "\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\20\55\5\5\1\0\2\5\2\0\4\5\1\0\1\5\6\0"+
    "\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\23\5\1\0\13\5\10\0\6\5\1\0\26\5\2\0\1\5\6"+
    "\0\10\5\10\0\13\5\5\0\3\5\15\0\12\10\4\0\6\5\1\0\1\5\17\0\2\5\7\0\2\5\12\10"+
    "\3\5\2\0\2\5\1\0\16\5\15\0\11\5\13\0\1\5\16\0\12\10\6\5\4\0\2\5\4\0\1\5\5"+
    "\0\6\5\4\0\1\5\11\0\1\5\3\0\1\5\7\0\11\5\7\0\5\5\17\0\26\5\3\0\1\5\2\0\1\5"+
    "\7\0\12\5\4\0\12\10\1\5\4\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5"+
    "\3\0\1\5\20\0\1\5\15\0\2\5\1\0\1\5\5\0\6\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\17\0\4\5\1\0\1\5\7\0\12\10\2\0\3\5\20\0\11\5\1\0\2\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\2\0\1\5\30\0\1\5\13\0\10\5\2\0\1\5\3\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3"+
    "\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\13\0\10\5\1\0\2\5\10\0\3\5"+
    "\5\0\4\5\1\0\5\5\3\0\1\5\3\0\2\5\15\0\13\5\2\0\1\5\21\0\1\5\12\0\6\5\5\0\22"+
    "\5\3\0\10\5\1\0\11\5\1\0\1\5\2\0\7\5\11\0\1\5\1\0\2\5\14\0\12\10\7\0\2\5\1"+
    "\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0"+
    "\2\5\1\0\4\5\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\10\2\0\14\5\1\0\24\5"+
    "\13\0\5\5\3\0\6\5\4\0\4\5\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5\1\0\6"+
    "\5\1\0\1\5\5\0\1\5\2\0\13\5\1\0\15\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\1"+
    "\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\16\5\2\0\6\5\2\0\15\5\2\0\1\5\1\11"+
    "\17\5\1\0\10\5\7\0\15\5\1\0\6\5\23\0\1\5\4\0\1\5\3\0\11\5\1\0\1\5\5\0\17\5"+
    "\1\0\16\5\2\0\14\5\13\0\1\5\15\0\7\5\7\0\16\5\15\0\2\5\12\10\3\0\3\5\11\0"+
    "\4\5\1\0\4\5\3\0\2\5\11\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\6\5\1\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\13\11\15\0\2\42\5\0\1\11\17\0\2\55"+
    "\36\0\1\11\1\57\1\56\15\57\1\56\20\57\15\56\5\57\1\56\4\57\1\56\2\57\12\56"+
    "\1\57\1\56\3\57\5\56\6\57\1\56\1\57\1\56\1\57\1\56\1\57\4\56\1\57\13\56\2"+
    "\57\4\56\5\57\5\56\4\57\1\56\4\57\2\56\13\57\37\56\1\57\5\56\6\57\4\56\3\57"+
    "\2\56\14\57\6\56\1\57\1\56\5\57\1\56\2\57\10\56\7\57\10\56\11\57\7\56\1\57"+
    "\7\56\20\57\1\56\1\11\4\57\2\56\12\57\5\56\5\57\2\56\4\57\26\56\6\57\16\56"+
    "\1\57\4\56\5\57\31\56\2\57\13\56\5\57\6\56\12\57\12\60\2\56\13\57\11\56\2"+
    "\57\27\56\2\57\15\56\10\57\2\56\1\57\3\56\1\57\4\56\1\57\7\56\15\57\4\56\14"+
    "\57\12\60\10\57\6\56\3\57\1\56\1\57\1\56\2\57\12\60\6\56\4\57\21\56\1\57\12"+
    "\56\12\60\5\56\1\57\11\56\7\57\3\56\1\57\10\56\4\57\7\56\3\57\1\56\3\57\2"+
    "\56\1\57\1\56\3\57\2\56\2\57\5\56\2\57\1\56\1\57\1\56\30\57\3\56\4\57\3\56"+
    "\14\57\6\56\2\57\6\56\2\57\6\56\11\57\7\56\4\57\21\56\4\57\12\56\11\57\5\56"+
    "\5\57\1\56\1\57\12\56\1\57\15\56\1\57\5\56\1\57\1\56\1\57\2\56\1\57\2\56\1"+
    "\57\14\56\21\57\15\56\6\57\12\56\2\57\6\56\2\57\6\56\2\57\6\56\2\57\3\56\21"+
    "\57\2\0\14\5\1\0\16\5\1\0\2\5\1\0\2\5\1\0\10\5\6\0\4\5\4\0\16\5\2\0\1\5\1"+
    "\0\14\5\1\0\2\5\3\0\1\5\2\0\4\5\1\0\2\5\12\0\10\5\6\0\6\5\1\0\3\5\1\0\12\5"+
    "\3\0\1\5\12\0\4\5\13\0\12\10\1\5\1\0\1\5\3\0\7\5\1\0\1\5\1\0\4\5\1\0\17\5"+
    "\1\0\2\5\14\0\3\5\4\0\2\5\1\0\1\5\20\0\4\5\10\0\1\5\13\0\10\5\5\0\10\5\1\0"+
    "\12\5\2\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0\21\5\1\0\4\5\2"+
    "\0\10\5\1\0\7\5\1\0\14\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0\14\5\2\0\13\5\1\0\10"+
    "\5\2\0\22\10\1\0\2\5\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0"+
    "\1\5\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1"+
    "\5\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5"+
    "\1\0\12\5\1\0\5\5\1\0\3\5\1\0\5\5\1\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\2\1\1\2\1\3\2\4\1\5\1\6\10\4"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\10\4\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\1\1\33"+
    "\2\34\1\35\2\34\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\37\1\45\1\37\1\46\1\47\1\50"+
    "\1\51\2\50\1\52\1\53\2\52\1\37\1\54\1\1"+
    "\4\37\1\1\4\37\2\55\1\56\1\55\1\0\2\2"+
    "\1\0\5\4\1\57\15\4\1\60\1\4\1\61\2\4"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\4\1\73\27\4\1\74\2\34\1\0\1\75"+
    "\2\34\1\76\1\0\1\77\1\100\1\101\1\102\1\103"+
    "\2\50\1\104\2\52\4\0\1\54\2\0\1\54\1\105"+
    "\5\0\1\106\4\0\3\55\1\107\5\4\1\110\1\111"+
    "\6\4\1\112\7\4\1\113\2\4\1\114\2\4\1\115"+
    "\22\4\1\116\4\4\1\34\2\0\1\75\1\34\4\0"+
    "\1\103\1\50\1\104\1\52\1\54\1\0\1\106\1\0"+
    "\1\117\2\0\1\55\1\107\1\55\4\4\1\120\1\4"+
    "\1\0\1\121\1\4\1\122\3\4\1\123\4\4\1\124"+
    "\6\4\1\125\4\4\1\126\1\4\1\127\5\4\1\130"+
    "\1\4\1\131\4\4\1\132\1\133\1\4\1\134\2\4"+
    "\5\0\1\135\6\0\1\55\1\136\4\4\1\137\6\4"+
    "\1\140\1\4\1\141\7\4\1\142\1\4\1\143\2\4"+
    "\1\144\1\145\10\4\1\146\3\0\1\75\1\34\1\44"+
    "\1\0\1\103\1\50\1\104\1\52\1\0\1\106\3\0"+
    "\1\4\1\147\3\4\1\150\1\151\4\4\1\152\2\4"+
    "\1\153\1\154\1\155\1\156\1\4\1\157\1\4\1\160"+
    "\5\4\1\161\1\4\1\162\11\0\1\107\1\163\1\164"+
    "\2\4\1\0\1\165\1\166\2\4\1\167\1\4\1\170"+
    "\1\171\1\4\1\172\2\4\1\173\1\4\1\174\1\175"+
    "\1\176\3\0\1\177\1\200\2\4\1\201\2\4\1\202"+
    "\1\4\1\203\1\0\3\4\1\204\1\205\1\0\2\4"+
    "\1\206\1\0\1\44\1\207\1\210\1\0\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u0240\0\u06c0\0\u0708\0\u0750\0\u0798\0\u0240\0\u0240\0\u07e0"+
    "\0\u0828\0\u0240\0\u0240\0\u0240\0\u0870\0\u08b8\0\u0900\0\u0948"+
    "\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0240\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0b40\0\u0240\0\u0b88"+
    "\0\u0bd0\0\u0240\0\u0c18\0\u0c60\0\u0ca8\0\u0240\0\u0240\0\u0240"+
    "\0\u0cf0\0\u0d38\0\u0240\0\u0d80\0\u0240\0\u0dc8\0\u0240\0\u0240"+
    "\0\u0e10\0\u0240\0\u0e58\0\u0ea0\0\u0ee8\0\u0240\0\u0f30\0\u0f78"+
    "\0\u0fc0\0\u0fc0\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u10e0"+
    "\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290\0\u0240\0\u12d8"+
    "\0\u1320\0\u1368\0\u0240\0\u0288\0\u13b0\0\u13f8\0\u1440\0\u1488"+
    "\0\u14d0\0\u0438\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680"+
    "\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u0360"+
    "\0\u18c0\0\u1908\0\u1950\0\u1998\0\u0240\0\u0240\0\u0240\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u19e0\0\u0360\0\u1a28"+
    "\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68"+
    "\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u0240\0\u20a0"+
    "\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u0240\0\u2250\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8"+
    "\0\u2400\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u2448\0\u2490\0\u24d8"+
    "\0\u2490\0\u0240\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u2520"+
    "\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760"+
    "\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u0360\0\u2958"+
    "\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u0360\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u0360\0\u2d00\0\u2d48"+
    "\0\u0360\0\u2d90\0\u2dd8\0\u0360\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8"+
    "\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138"+
    "\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u0360\0\u3330"+
    "\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570"+
    "\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0"+
    "\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u0240\0\u3918\0\u3960\0\u39a8"+
    "\0\u26d0\0\u2760\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u0360\0\u3b10"+
    "\0\u3b58\0\u0240\0\u3ba0\0\u0360\0\u3be8\0\u3c30\0\u3c78\0\u0360"+
    "\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8"+
    "\0\u3f00\0\u3f48\0\u3f90\0\u0360\0\u3fd8\0\u4020\0\u4068\0\u40b0"+
    "\0\u0360\0\u40f8\0\u0360\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260"+
    "\0\u0360\0\u42a8\0\u0360\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u0360"+
    "\0\u0360\0\u4410\0\u0360\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578"+
    "\0\u45c0\0\u4608\0\u0240\0\u4650\0\u4698\0\u46e0\0\u4728\0\u4770"+
    "\0\u47b8\0\u4800\0\u0360\0\u4848\0\u4890\0\u48d8\0\u4920\0\u0360"+
    "\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u0360\0\u4b18"+
    "\0\u0360\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10"+
    "\0\u0360\0\u4d58\0\u0360\0\u4da0\0\u4de8\0\u0360\0\u0360\0\u4e30"+
    "\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f98\0\u4fe0\0\u5028\0\u0360"+
    "\0\u5070\0\u50b8\0\u5100\0\u0b88\0\u5148\0\u4608\0\u5190\0\u0e10"+
    "\0\u51d8\0\u0ee8\0\u5220\0\u5268\0\u10e0\0\u52b0\0\u52f8\0\u5340"+
    "\0\u5388\0\u0360\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u0360\0\u54f0"+
    "\0\u5538\0\u5580\0\u55c8\0\u0360\0\u5610\0\u5658\0\u56a0\0\u0360"+
    "\0\u0360\0\u0360\0\u56e8\0\u0360\0\u5730\0\u0360\0\u5778\0\u57c0"+
    "\0\u5808\0\u5850\0\u5898\0\u0360\0\u58e0\0\u0360\0\u5928\0\u5970"+
    "\0\u59b8\0\u5a00\0\u5a48\0\u5a90\0\u5ad8\0\u5b20\0\u5b68\0\u1248"+
    "\0\u0360\0\u0360\0\u5bb0\0\u5bf8\0\u5c40\0\u0240\0\u0360\0\u5c88"+
    "\0\u5cd0\0\u0360\0\u5d18\0\u0360\0\u0360\0\u5d60\0\u0360\0\u5da8"+
    "\0\u5df0\0\u0360\0\u5e38\0\u0360\0\u0360\0\u0240\0\u5e80\0\u5ec8"+
    "\0\u5f10\0\u0360\0\u0360\0\u5f58\0\u5fa0\0\u0360\0\u5fe8\0\u6030"+
    "\0\u0360\0\u6078\0\u0240\0\u60c0\0\u6108\0\u6150\0\u6198\0\u0360"+
    "\0\u0360\0\u61e0\0\u6228\0\u6270\0\u0360\0\u62b8\0\u61e0\0\u0360"+
    "\0\u0360\0\u6300\0\u61e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\11\1\12\1\13\1\14\1\15\1\16\1\11\1\14"+
    "\1\17\1\20\1\17\1\21\1\22\1\23\1\17\1\11"+
    "\1\24\1\25\1\26\1\27\1\30\1\15\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\4\15\2\17\1\37\1\40"+
    "\1\41\1\42\1\11\1\43\1\44\1\45\1\15\1\46"+
    "\1\11\1\15\1\11\1\14\1\47\1\50\1\15\1\51"+
    "\3\15\1\52\1\15\1\53\1\15\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\2\70\1\71\15\70\1\72\6\70\1\73\1\74"+
    "\1\75\13\70\1\76\42\70\2\76\1\77\1\100\2\76"+
    "\1\101\3\76\1\102\1\103\3\101\1\103\1\76\6\101"+
    "\1\104\5\76\4\101\2\11\1\76\1\105\3\76\1\106"+
    "\1\107\1\110\1\101\2\76\21\101\11\76\3\111\1\112"+
    "\23\111\1\113\1\114\1\76\56\111\2\115\1\116\24\115"+
    "\1\117\1\120\1\76\56\115\1\121\1\122\11\121\1\123"+
    "\13\121\1\124\1\125\10\121\2\123\5\121\1\126\37\121"+
    "\13\127\1\130\13\127\1\131\1\132\2\127\1\133\5\127"+
    "\2\130\1\127\1\134\43\127\1\135\1\136\16\135\1\137"+
    "\6\135\1\140\60\135\117\0\1\141\100\0\1\13\1\142"+
    "\1\13\1\143\104\13\4\0\1\14\3\0\1\14\47\0"+
    "\1\14\31\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\2\15\1\145\2\0\3\15\1\146\2\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\1\15"+
    "\1\147\1\15\1\150\7\15\1\151\3\15\22\0\1\17"+
    "\1\0\1\17\3\0\1\17\21\0\2\17\45\0\13\152"+
    "\1\0\74\152\2\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\1\15\1\153\1\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\1\15"+
    "\1\154\15\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\3\15\1\155\4\15\1\156\6\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\1\15\1\157\4\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\3\15\1\160\4\15\1\161\6\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\2\15\1\162\1\163\2\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\1\15\1\164\3\15\1\165"+
    "\1\166\10\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\10\15\1\167\6\15\13\0\1\144"+
    "\1\0\2\15\1\170\1\0\1\15\3\0\1\15\1\171"+
    "\1\15\2\0\4\15\1\172\1\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\1\15\1\173"+
    "\6\15\1\174\6\15\41\0\1\175\112\0\1\176\16\0"+
    "\1\177\107\0\1\200\101\0\1\201\115\0\1\202\102\0"+
    "\1\203\114\0\1\204\111\0\1\205\35\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\2\15\1\206\2\0\1\207"+
    "\1\210\2\15\1\211\1\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\2\15\1\212\1\15\1\213\12\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\2\15"+
    "\1\214\2\0\2\15\1\215\1\216\2\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\3\15\1\217\13\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\2\15\1\220\3\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\1\15\1\221\1\15\1\222\13\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\2\15"+
    "\1\223\2\0\4\15\1\224\1\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\2\15\1\225"+
    "\3\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\1\15\1\226\11\15\1\227\3\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\1\230\5\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\3\15"+
    "\1\231\13\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\1\15\1\232\6\15\1\233\6\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\3\15\1\234\2\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\3\15\1\235\2\15\1\236\10\15"+
    "\117\0\1\237\1\0\2\70\1\240\15\70\1\0\6\70"+
    "\1\73\1\74\1\0\13\70\1\0\43\70\1\241\1\240"+
    "\15\70\1\0\6\70\1\73\1\74\1\0\13\70\1\242"+
    "\44\70\1\240\15\70\1\0\6\70\1\243\1\244\1\0"+
    "\13\70\1\0\44\70\1\240\15\70\1\0\6\70\1\245"+
    "\1\244\1\0\13\70\1\0\42\70\12\0\1\246\17\0"+
    "\1\247\15\0\1\250\43\0\1\101\1\0\3\101\3\0"+
    "\3\101\2\0\6\101\4\0\1\101\1\0\4\101\12\0"+
    "\24\101\55\0\1\251\72\0\1\252\124\0\1\253\43\0"+
    "\3\111\1\0\23\111\1\113\1\114\1\0\61\111\1\0"+
    "\23\111\1\254\1\255\1\0\61\111\1\0\23\111\1\256"+
    "\1\255\1\0\56\111\2\115\1\0\24\115\1\117\1\120"+
    "\1\0\60\115\1\0\24\115\1\257\1\260\1\0\60\115"+
    "\1\0\24\115\1\261\1\260\1\0\56\115\1\262\1\122"+
    "\25\262\1\263\1\264\17\262\1\265\40\262\1\122\25\262"+
    "\1\266\1\267\17\262\1\265\40\262\1\122\25\262\1\270"+
    "\1\271\17\262\1\265\40\262\1\122\25\262\1\263\1\264"+
    "\13\262\1\272\3\262\1\265\37\262\27\273\1\274\1\275"+
    "\2\273\1\276\10\273\1\277\72\273\1\300\1\301\2\273"+
    "\1\276\10\273\1\277\72\273\1\302\1\301\2\273\1\276"+
    "\10\273\1\277\72\273\1\274\1\275\2\273\1\303\10\273"+
    "\1\277\72\273\1\274\1\275\2\273\1\304\10\273\1\277"+
    "\43\273\1\135\1\136\16\135\1\0\6\135\1\140\60\135"+
    "\1\305\1\136\25\305\1\306\60\305\1\135\1\307\16\135"+
    "\1\0\6\135\1\310\60\135\2\0\1\15\105\0\1\13"+
    "\1\142\106\13\2\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\3\15\1\311\13\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\4\15"+
    "\1\312\1\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\3\15\1\313\2\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\2\15"+
    "\1\314\3\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\4\15\1\315\1\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\2\15\1\316\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\12\15\1\317\4\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\4\15\1\320"+
    "\12\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\4\15\1\321\1\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\2\15\1\322"+
    "\3\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\1\15\1\323\1\15\2\0\6\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\2\15\1\324"+
    "\3\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\1\15\1\325\3\15\1\326\11\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\1\15\1\327"+
    "\1\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\6\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\2\15\1\330\14\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\12\15\1\331\4\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\2\15\1\332\3\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\1\333\1\334\4\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\6\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\12\15\1\335\4\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\1\15\1\336\4\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\1\15\1\337\4\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\1\340\2\15"+
    "\2\0\6\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\2\15\1\341\2\0\6\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\1\15\1\342"+
    "\4\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\4\15\1\343\1\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\5\15\1\344\11\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\3\15\1\345\13\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\1\15\1\346\4\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\3\15\1\347\13\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\6\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\10\15\1\350\6\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\4\15\1\351\1\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\6\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\3\15\1\352\13\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\10\15\1\353\6\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\1\15\1\354\4\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\4\15\1\355\1\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\1\356\5\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\7\15"+
    "\1\357\3\15\1\360\3\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\3\15\1\361\2\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\17\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\2\15\1\362\3\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\4\15\1\363\12\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\2\15"+
    "\1\364\14\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\3\15\1\365\13\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\3\15"+
    "\1\366\2\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\2\15\1\367\3\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\2\15"+
    "\1\370\3\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\1\15\1\371\4\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\2\15"+
    "\1\372\3\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\3\15\1\373\2\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\11\0\1\70"+
    "\1\241\1\240\15\70\1\0\6\70\1\73\1\74\1\0"+
    "\13\70\1\0\44\70\1\374\15\70\1\0\6\70\1\73"+
    "\1\74\1\0\13\70\1\0\42\70\2\0\1\375\44\0"+
    "\1\376\40\0\2\70\1\240\15\70\1\0\6\70\1\377"+
    "\1\74\1\0\13\70\1\0\44\70\1\240\15\70\1\0"+
    "\6\70\1\73\1\244\1\0\13\70\1\0\44\70\1\240"+
    "\15\70\1\0\6\70\1\243\1\u0100\1\0\13\70\1\0"+
    "\42\70\13\u0101\1\u0102\17\u0101\1\u0103\1\u0104\4\u0101\2\u0102"+
    "\45\u0101\3\111\1\0\23\111\1\u0105\1\114\1\0\61\111"+
    "\1\0\23\111\1\113\1\255\1\0\61\111\1\0\23\111"+
    "\1\254\1\u0106\1\0\56\111\2\115\1\0\24\115\1\u0107"+
    "\1\120\1\0\60\115\1\0\24\115\1\117\1\260\1\0"+
    "\60\115\1\0\24\115\1\257\1\u0108\1\0\56\115\1\262"+
    "\1\122\25\262\1\u0109\1\264\17\262\1\265\40\262\1\122"+
    "\25\262\1\263\1\271\17\262\1\265\40\262\1\122\25\262"+
    "\1\266\1\u010a\17\262\1\265\37\262\27\273\1\u010b\1\275"+
    "\2\273\1\276\10\273\1\277\72\273\1\274\1\301\2\273"+
    "\1\276\10\273\1\277\72\273\1\300\1\u010c\2\273\1\276"+
    "\10\273\1\277\72\273\1\274\1\275\2\273\1\303\10\273"+
    "\1\u010d\72\273\1\274\1\275\2\273\1\303\10\273\1\u010e"+
    "\43\273\1\305\1\136\16\305\1\u010f\6\305\1\u0110\61\305"+
    "\1\136\16\305\1\u010f\6\305\1\u0111\60\305\1\135\1\136"+
    "\25\135\1\u0112\61\135\1\136\16\135\1\0\6\135\1\310"+
    "\60\135\2\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\1\15\1\u0113\15\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\1\15\1\u0114"+
    "\15\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\2\15\1\u0115\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\17\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\10\15\1\u0116\1\u0117"+
    "\5\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\4\15\1\u0118\12\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\2\0\1\u0119\3\15\1\u0119\1\u011a"+
    "\4\15\1\u011b\1\15\6\0\4\15\1\u0119\11\0\1\15"+
    "\2\0\1\15\1\0\17\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\11\15\1\u011c\5\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\5\15\1\u011d\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\3\15\1\u011e\2\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\13\15\1\u011f"+
    "\3\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\10\15\1\u0120\6\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\15\15\1\u0121"+
    "\1\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\4\15\1\u0122\1\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\10\15\1\u0123"+
    "\6\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\2\15\1\u0124\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\17\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\10\15\1\u0125\6\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\6\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\3\15\1\u0126\13\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\3\15\1\u0127\13\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\2\15\1\u0128\3\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\13\15\1\u0129\3\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\3\15"+
    "\1\u012a\13\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\3\15\1\u012b\2\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\1\15"+
    "\1\u012c\4\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\1\15\1\u012d\15\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\3\15"+
    "\1\u012e\13\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\2\15\1\u012f\3\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\3\15"+
    "\1\u0130\2\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\2\15\1\u0131\14\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\1\15"+
    "\1\u0132\15\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\7\15\1\u0133\7\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\2\15\1\u0134\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\1\15\1\u0135\15\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\4\15\1\u0136"+
    "\12\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\1\u0137\3\15\1\u0138\1\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\10\15"+
    "\1\u0139\6\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\12\15\1\u013a\4\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\1\15\1\u013b\1\15"+
    "\2\0\6\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\15\15\1\u013c\1\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\1\15"+
    "\1\u013d\15\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\11\15\1\u013e\5\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\2\15\1\u013f\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\4\15\1\u0140\1\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\4\15\1\u0141"+
    "\1\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\1\u0142\5\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\17\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\6\15\1\u0143\10\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\6\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\11\15\1\u0144\5\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\2\15\1\u0145\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\11\0"+
    "\1\70\1\241\1\240\24\70\1\73\1\74\1\0\13\70"+
    "\1\0\42\70\6\0\1\u0146\5\0\3\u0146\2\0\6\u0146"+
    "\6\0\4\u0146\12\0\1\u0146\2\0\21\u0146\13\0\1\u0147"+
    "\11\0\1\u0148\73\0\2\70\1\240\15\70\1\0\6\70"+
    "\1\377\1\244\1\0\13\70\1\0\44\70\1\240\15\70"+
    "\1\0\6\70\1\u0149\1\244\1\0\13\70\1\0\42\70"+
    "\123\u014a\1\0\25\u014a\2\0\100\u014a\1\u014b\111\u014a\1\u014c"+
    "\52\u014a\3\111\1\0\23\111\1\u0105\1\255\1\0\61\111"+
    "\1\0\23\111\1\u014d\1\255\1\0\56\111\2\115\1\0"+
    "\24\115\1\u0107\1\260\1\0\60\115\1\0\24\115\1\u014e"+
    "\1\260\1\0\56\115\1\262\1\122\25\262\1\u0109\1\267"+
    "\17\262\1\265\40\262\1\122\25\262\1\u014f\1\271\17\262"+
    "\1\265\37\262\27\273\1\u010b\1\301\2\273\1\276\10\273"+
    "\1\277\72\273\1\u0150\1\301\2\273\1\276\10\273\1\277"+
    "\72\273\1\274\1\275\2\273\1\u0151\10\273\1\u010e\43\273"+
    "\1\u010f\1\u0152\106\u010f\1\305\1\307\16\305\1\u010f\6\305"+
    "\1\u0111\60\305\2\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\1\15\1\u0153\4\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\2\15\1\u0154\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\10\15\1\u0155\6\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\1\15\1\u0156"+
    "\15\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\1\15\1\u0157\4\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\24\0\1\u0119\3\0"+
    "\1\u0119\1\u011a\20\0\1\u0119\50\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\1\u0158\5\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\1\15\1\u0159\4\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\4\15\1\u015a\1\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\4\15\1\u015b\12\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\3\15\1\u015c\2\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\1\u015d\5\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\3\15\1\u015e\13\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\10\15"+
    "\1\u015f\6\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\3\15\1\u0160\13\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\16\15"+
    "\1\u0161\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\13\15\1\u0162\3\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\3\15\1\u0163"+
    "\2\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\2\15\1\u0164\3\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\2\15\1\u0165"+
    "\3\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\15\15\1\u0166\1\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\4\15\1\u0167"+
    "\12\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\1\15\1\u0168\4\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\1\15\1\u0169"+
    "\4\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\3\15\1\u016a\13\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\11\15\1\u016b"+
    "\5\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\10\15\1\u016c\6\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\1\15\1\u016d"+
    "\4\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\6\15\1\u016e\10\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\1\15\1\u016f"+
    "\4\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\10\15\1\u0170\6\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\3\15\1\u0171"+
    "\13\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\1\15\1\u0172\15\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\1\15\1\u0173\1\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\1\15\1\u0174\15\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\3\15\1\u0175"+
    "\2\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\3\15\1\u0176\2\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\10\15\1\u0177"+
    "\6\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\10\15\1\u0178\6\15\13\0\1\u0179\1\0"+
    "\1\u0146\1\0\3\u0146\3\0\3\u0146\2\0\6\u0146\4\0"+
    "\1\u0146\1\0\4\u0146\12\0\24\u0146\15\0\1\u017a\3\0"+
    "\1\u017a\47\0\1\u017a\31\0\1\u017b\134\0\1\u017c\1\u017d"+
    "\57\0\13\u014a\1\0\25\u014a\2\0\1\u014a\1\u017e\56\u014a"+
    "\1\0\22\u014a\1\u017f\2\u014a\2\0\1\u014a\1\u017e\43\u014a"+
    "\27\0\1\u0180\1\u0181\106\0\1\u0182\1\u0183\106\0\1\122"+
    "\1\u0184\106\0\1\u0185\1\u0186\112\0\1\u0187\10\0\1\u010e"+
    "\43\0\1\135\1\307\16\135\1\0\6\135\1\u0188\60\135"+
    "\2\0\1\144\1\0\3\15\1\0\1\15\3\0\2\15"+
    "\1\u0189\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\6\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\7\15\1\u018a\7\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\4\15\1\u018b\12\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\3\15\1\u018c\2\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\6\15\1\u018d\10\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\5\15\1\u018e\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\1\15"+
    "\1\u018f\4\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\4\15\1\u0190\12\15\13\0\1\144"+
    "\1\0\2\15\1\u0191\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\1\15\1\u0192\15\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\6\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\13\15\1\u0193\3\15\13\0"+
    "\1\144\1\0\2\15\1\u0194\1\0\1\15\3\0\3\15"+
    "\2\0\6\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\2\15\1\u0195\3\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\10\15"+
    "\1\u0196\6\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\4\15\1\u0197\1\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\1\15"+
    "\1\u0198\4\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\10\15\1\u0199\6\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\6\15"+
    "\1\u019a\10\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\1\15\1\u019b\15\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\4\15"+
    "\1\u019c\1\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\1\15\1\u019d\15\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\10\15"+
    "\1\u019e\6\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\4\15\1\u019f\12\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\3\15"+
    "\1\u01a0\2\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\1\15\1\u01a1\4\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\10\15"+
    "\1\u01a2\6\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\5\15\1\u01a3\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\4\15\1\u01a4"+
    "\12\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\3\15\1\u01a5\13\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\2\15\1\u01a6"+
    "\3\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\57\0\1\u01a7\43\0\1\u01a8\1\0\1\u017a\3\0"+
    "\1\u017a\47\0\1\u017a\33\0\1\u01a9\1\0\1\u01a9\26\0"+
    "\3\u01a9\13\0\1\u01a9\5\0\2\u01a9\1\0\1\u01a9\2\0"+
    "\2\u01a9\17\0\2\70\1\240\15\70\1\0\6\70\1\u0149"+
    "\1\u01aa\1\0\13\70\1\0\42\70\13\u014a\1\0\23\u014a"+
    "\1\u01ab\1\u014a\2\0\1\u014a\1\u017e\43\u014a\3\111\1\0"+
    "\23\111\1\u014d\1\u01ac\1\0\56\111\2\115\1\0\24\115"+
    "\1\u014e\1\u01ad\1\0\56\115\1\262\1\122\25\262\1\u014f"+
    "\1\u01ae\17\262\1\265\37\262\27\273\1\u0150\1\u01af\2\273"+
    "\1\276\10\273\1\277\43\273\44\0\1\u010d\72\0\1\u01b0"+
    "\62\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\6\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\5\15\1\u01b1\11\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\6\15\1\u01b2\10\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\6\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\3\15\1\u01b3\13\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\3\15\1\u01b4\13\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\2\0\1\u01b5"+
    "\3\15\1\u01b5\1\u01b6\6\15\6\0\4\15\1\u01b5\11\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\10\15\1\u01b7"+
    "\6\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\6\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\3\15\1\u01b8\13\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\4\15\1\u01b9"+
    "\12\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\1\15\1\u01ba\4\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\4\15\1\u01bb"+
    "\12\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\1\u01bc\5\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\17\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\1\u01bd\5\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\1\15\1\u01be\4\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\4\15\1\u01bf\1\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\1\15\1\u01c0\4\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\4\15\1\u01c1\1\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\10\15\1\u01c2\6\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\1\15\1\u01c3\4\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\6\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\10\15\1\u01c4\6\15\13\0\1\144\1\0\3\15\1\0"+
    "\1\15\3\0\3\15\2\0\4\15\1\u01c5\1\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\17\15\13\0"+
    "\1\u01c6\153\0\1\u01c7\43\0\1\u01a8\1\0\1\u01a9\1\0"+
    "\1\u01a9\1\u01c8\25\0\3\u01a9\13\0\1\u01a9\5\0\2\u01a9"+
    "\1\0\1\u01a9\2\0\2\u01a9\47\0\1\70\57\0\13\u014a"+
    "\1\0\24\u014a\1\u01c9\2\0\1\u014a\1\u017e\43\u014a\30\0"+
    "\1\111\107\0\1\115\107\0\1\122\107\0\1\273\61\0"+
    "\1\144\1\0\3\15\1\0\1\15\3\0\3\15\2\0"+
    "\4\15\1\u01ca\1\15\6\0\4\15\12\0\1\15\2\0"+
    "\1\15\1\0\17\15\13\0\1\144\1\0\2\15\1\u01cb"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\24\0\1\u01b5"+
    "\3\0\1\u01b5\1\u01b6\20\0\1\u01b5\50\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\2\15\1\u01cc"+
    "\3\15\6\0\4\15\12\0\1\15\2\0\1\15\1\0"+
    "\17\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\1\15\1\u01cd\4\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\10\15\1\u01ce"+
    "\6\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\3\15\1\u01cf\2\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\3\15\1\u01d0"+
    "\13\15\13\0\1\144\1\0\3\15\1\0\1\15\3\0"+
    "\3\15\2\0\1\15\1\u01d1\4\15\6\0\4\15\12\0"+
    "\1\15\2\0\1\15\1\0\17\15\13\0\1\144\1\0"+
    "\3\15\1\0\1\15\3\0\3\15\2\0\6\15\6\0"+
    "\4\15\12\0\1\15\2\0\1\15\1\0\10\15\1\u01d2"+
    "\6\15\13\0\1\u01d3\111\0\1\u01a9\1\0\1\u01a9\1\u01c8"+
    "\25\0\3\u01a9\13\0\1\u01a9\5\0\2\u01a9\1\0\1\u01a9"+
    "\2\0\2\u01a9\17\0\13\u014a\1\0\23\u014a\1\u01d4\1\u014a"+
    "\2\0\1\u014a\1\u017e\43\u014a\2\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\1\15\1\u01d5\1\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\17\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\3\15\1\u01d6\2\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\17\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\6\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\3\15\1\u01d7\13\15"+
    "\13\0\1\144\1\0\3\15\1\0\1\15\3\0\3\15"+
    "\2\0\2\15\1\u01d8\3\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\17\15\13\0\1\144\1\0\3\15"+
    "\1\0\1\15\3\0\3\15\2\0\2\15\1\u01d9\3\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\17\15"+
    "\11\0\13\u014a\1\0\20\u014a\1\u01da\4\u014a\2\0\1\u014a"+
    "\1\u017e\43\u014a\2\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\6\15\6\0\4\15\12\0\1\15"+
    "\2\0\1\15\1\0\10\15\1\u01db\6\15\13\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\6\15"+
    "\6\0\4\15\12\0\1\15\2\0\1\15\1\0\3\15"+
    "\1\u01dc\13\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\4\15\1\u01dd\1\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\11\0\13\u01da"+
    "\1\0\25\u01da\2\0\1\u01de\1\u01df\43\u01da\2\0\1\144"+
    "\1\0\3\15\1\0\1\15\3\0\3\15\2\0\2\15"+
    "\1\u01e0\3\15\6\0\4\15\12\0\1\15\2\0\1\15"+
    "\1\0\17\15\13\0\1\144\1\0\3\15\1\0\1\15"+
    "\3\0\3\15\2\0\4\15\1\u01e1\1\15\6\0\4\15"+
    "\12\0\1\15\2\0\1\15\1\0\17\15\11\0\13\u01da"+
    "\1\0\25\u01da\2\0\1\u01e2\1\u01df\56\u01da\1\0\25\u01da"+
    "\2\0\1\u01e2\1\u01e3\43\u01da";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\17\1\1\11\4\1\2\11\2\1\3\11"+
    "\12\1\7\11\1\1\1\11\2\1\1\11\3\1\3\11"+
    "\2\1\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\3\1\1\11\20\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\0\30\1\11\11\31\1\1\11\2\1\1\0\3\1"+
    "\1\11\1\0\4\11\6\1\4\0\1\1\2\0\1\1"+
    "\1\11\5\0\1\1\4\0\70\1\2\0\2\1\4\0"+
    "\5\1\1\0\1\1\1\0\1\11\2\0\11\1\1\0"+
    "\1\11\53\1\5\0\1\11\6\0\47\1\3\0\3\1"+
    "\1\0\4\1\1\0\1\1\3\0\36\1\11\0\5\1"+
    "\1\0\1\11\17\1\1\11\3\0\11\1\1\11\1\0"+
    "\5\1\1\0\3\1\1\0\3\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean inXmlTemplate = false;
  private boolean inStringTemplate = false;
  private boolean inXmlTag = false;
  public BallerinaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BallerinaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 138: break;
          case 2: 
            { return QUOTEDSTRINGLITERAL;
            }
          case 139: break;
          case 3: 
            { return INTEGERLITERAL;
            }
          case 140: break;
          case 4: 
            { return IDENTIFIER;
            }
          case 141: break;
          case 5: 
            { return WHITE_SPACE;
            }
          case 142: break;
          case 6: 
            { return DIV;
            }
          case 143: break;
          case 7: 
            { return LEFT_BRACE;
            }
          case 144: break;
          case 8: 
            { return RIGHT_BRACE;
            }
          case 145: break;
          case 9: 
            { return LT;
            }
          case 146: break;
          case 10: 
            { return NOT;
            }
          case 147: break;
          case 11: 
            { return SUB;
            }
          case 148: break;
          case 12: 
            { return LEFT_BRACKET;
            }
          case 149: break;
          case 13: 
            { return RIGHT_BRACKET;
            }
          case 150: break;
          case 14: 
            { return GT;
            }
          case 151: break;
          case 15: 
            { return SEMICOLON;
            }
          case 152: break;
          case 16: 
            { return QUESTION_MARK;
            }
          case 153: break;
          case 17: 
            { return COLON;
            }
          case 154: break;
          case 18: 
            { return ASSIGN;
            }
          case 155: break;
          case 19: 
            { return DOT;
            }
          case 156: break;
          case 20: 
            { return COMMA;
            }
          case 157: break;
          case 21: 
            { return LEFT_PARENTHESIS;
            }
          case 158: break;
          case 22: 
            { return RIGHT_PARENTHESIS;
            }
          case 159: break;
          case 23: 
            { return ADD;
            }
          case 160: break;
          case 24: 
            { return MUL;
            }
          case 161: break;
          case 25: 
            { return POW;
            }
          case 162: break;
          case 26: 
            { return MOD;
            }
          case 163: break;
          case 27: 
            { return AT;
            }
          case 164: break;
          case 28: 
            { return XML_TEXT_SEQUENCE;
            }
          case 165: break;
          case 29: 
            { inXmlTemplate = false; yybegin(YYINITIAL); return XML_LITERAL_END;
            }
          case 166: break;
          case 30: 
            { yybegin(XML_TAG_MODE); return XML_TAG_OPEN;
            }
          case 167: break;
          case 31: 
            { inXmlTemplate = false; return BAD_CHARACTER;
            }
          case 168: break;
          case 32: 
            { yybegin(SINGLE_QUOTED_XML_STRING_MODE); return SINGLE_QUOTE;
            }
          case 169: break;
          case 33: 
            { yybegin(DOUBLE_QUOTED_XML_STRING_MODE); return DOUBLE_QUOTE;
            }
          case 170: break;
          case 34: 
            { return XML_QNAME;
            }
          case 171: break;
          case 35: 
            { /*return SLASH;*/
            }
          case 172: break;
          case 36: 
            { 
            }
          case 173: break;
          case 37: 
            { yybegin(XML_MODE); return XML_TAG_CLOSE;
            }
          case 174: break;
          case 38: 
            { return QNAME_SEPARATOR;
            }
          case 175: break;
          case 39: 
            { return EQUALS;
            }
          case 176: break;
          case 40: 
            { return XML_DOUBLE_QUOTED_STRING_SEQUENCE;
            }
          case 177: break;
          case 41: 
            { yybegin(XML_TAG_MODE); return DOUBLE_QUOTE_END;
            }
          case 178: break;
          case 42: 
            { return XML_SINGLE_QUOTED_STRING_SEQUENCE;
            }
          case 179: break;
          case 43: 
            { yybegin(XML_TAG_MODE); return SINGLE_QUOTE_END;
            }
          case 180: break;
          case 44: 
            { yybegin(YYINITIAL); return XML_PI_TEMPLATE_TEXT;
            }
          case 181: break;
          case 45: 
            { return STRING_TEMPLATE_TEXT;
            }
          case 182: break;
          case 46: 
            { inXmlTemplate = false; yybegin(YYINITIAL); return STRING_TEMPLATE_LITERAL_END;
            }
          case 183: break;
          case 47: 
            { return LINE_COMMENT;
            }
          case 184: break;
          case 48: 
            { return IF;
            }
          case 185: break;
          case 49: 
            { return IN;
            }
          case 186: break;
          case 50: 
            { if(inXmlTag){ yybegin(XML_TAG_MODE); return EXPRESSION_END;} else if(inXmlTemplate) { yybegin(XML_MODE); return EXPRESSION_END; } else if(inStringTemplate){ yybegin(STRING_TEMPLATE_MODE); return EXPRESSION_END; } else { yypushback(1); return RIGHT_BRACE; }
            }
          case 187: break;
          case 51: 
            { return LARROW;
            }
          case 188: break;
          case 52: 
            { return LT_EQUAL;
            }
          case 189: break;
          case 53: 
            { return NOT_EQUAL;
            }
          case 190: break;
          case 54: 
            { return RARROW;
            }
          case 191: break;
          case 55: 
            { return GT_EQUAL;
            }
          case 192: break;
          case 56: 
            { return AND;
            }
          case 193: break;
          case 57: 
            { return EQUAL;
            }
          case 194: break;
          case 58: 
            { return RANGE;
            }
          case 195: break;
          case 59: 
            { return AS;
            }
          case 196: break;
          case 60: 
            { return OR;
            }
          case 197: break;
          case 61: 
            { yybegin(YYINITIAL); return XML_TEMPLATE_TEXT;
            }
          case 198: break;
          case 62: 
            { yybegin(XML_TAG_MODE); return XML_TAG_OPEN_SLASH;
            }
          case 199: break;
          case 63: 
            { yybegin(XML_PI_MODE); return XML_TAG_SPECIAL_OPEN;
            }
          case 200: break;
          case 64: 
            { yybegin(XML_MODE); return XML_TAG_SLASH_CLOSE;
            }
          case 201: break;
          case 65: 
            { inXmlTag = true; yybegin(YYINITIAL); return XML_TAG_EXPRESSION_START;
            }
          case 202: break;
          case 66: 
            { /*yybegin(XML_MODE); return XML_TAG_SPECIAL_CLOSE;*/
            }
          case 203: break;
          case 67: 
            { yybegin(YYINITIAL); return XML_DOUBLE_QUOTED_TEMPLATE_STRING;
            }
          case 204: break;
          case 68: 
            { yybegin(YYINITIAL); return XML_SINGLE_QUOTED_TEMPLATE_STRING;
            }
          case 205: break;
          case 69: 
            { yybegin(XML_MODE); return XML_PI_TEXT;
            }
          case 206: break;
          case 70: 
            { yybegin(YYINITIAL); return XML_COMMENT_TEMPLATE_TEXT;
            }
          case 207: break;
          case 71: 
            { yybegin(YYINITIAL); return STRING_TEMPLATE_EXPRESSION_START;
            }
          case 208: break;
          case 72: 
            { return XML;
            }
          case 209: break;
          case 73: 
            { return MAP;
            }
          case 210: break;
          case 74: 
            { return TRY;
            }
          case 211: break;
          case 75: 
            { return INT;
            }
          case 212: break;
          case 76: 
            { return ALL;
            }
          case 213: break;
          case 77: 
            { return ANY;
            }
          case 214: break;
          case 78: 
            { return VAR;
            }
          case 215: break;
          case 79: 
            { yybegin(XML_MODE); return XML_COMMENT_TEXT;
            }
          case 216: break;
          case 80: 
            { return FORK;
            }
          case 217: break;
          case 81: 
            { inXmlTemplate = true; yybegin(XML_MODE); return XML_LITERAL_START;
            }
          case 218: break;
          case 82: 
            { return LOCK;
            }
          case 219: break;
          case 83: 
            { return SOME;
            }
          case 220: break;
          case 84: 
            { return TYPE;
            }
          case 221: break;
          case 85: 
            { return NEXT;
            }
          case 222: break;
          case 86: 
            { return BLOB;
            }
          case 223: break;
          case 87: 
            { return BIND;
            }
          case 224: break;
          case 88: 
            { return ELSE;
            }
          case 225: break;
          case 89: 
            { return ENUM;
            }
          case 226: break;
          case 90: 
            { return JSON;
            }
          case 227: break;
          case 91: 
            { return JOIN;
            }
          case 228: break;
          case 92: 
            { return WITH;
            }
          case 229: break;
          case 93: 
            { yybegin(XML_COMMENT_MODE); return XML_COMMENT_START;
            }
          case 230: break;
          case 94: 
            { return FLOAT;
            }
          case 231: break;
          case 95: 
            { return XMLNS;
            }
          case 232: break;
          case 96: 
            { return TABLE;
            }
          case 233: break;
          case 97: 
            { return THROW;
            }
          case 234: break;
          case 98: 
            { return ABORT;
            }
          case 235: break;
          case 99: 
            { return BREAK;
            }
          case 236: break;
          case 100: 
            { return CATCH;
            }
          case 237: break;
          case 101: 
            { return CONST;
            }
          case 238: break;
          case 102: 
            { return WHILE;
            }
          case 239: break;
          case 103: 
            { return FAILED;
            }
          case 240: break;
          case 104: 
            { return STRING;
            }
          case 241: break;
          case 105: 
            { return STRUCT;
            }
          case 242: break;
          case 106: 
            { return TYPEOF;
            }
          case 243: break;
          case 107: 
            { return RETURN;
            }
          case 244: break;
          case 108: 
            { return IMPORT;
            }
          case 245: break;
          case 109: 
            { return NATIVE;
            }
          case 246: break;
          case 110: 
            { return ATTACH;
            }
          case 247: break;
          case 111: 
            { return ACTION;
            }
          case 248: break;
          case 112: 
            { return CREATE;
            }
          case 249: break;
          case 113: 
            { return PUBLIC;
            }
          case 250: break;
          case 114: 
            { return WORKER;
            }
          case 251: break;
          case 115: 
            { return FINALLY;
            }
          case 252: break;
          case 116: 
            { return FOREACH;
            }
          case 253: break;
          case 117: 
            { inStringTemplate = true; yybegin(STRING_TEMPLATE_MODE); return STRING_TEMPLATE_LITERAL_START;
            }
          case 254: break;
          case 118: 
            { return SERVICE;
            }
          case 255: break;
          case 119: 
            { return TIMEOUT;
            }
          case 256: break;
          case 120: 
            { return RETRIES;
            }
          case 257: break;
          case 121: 
            { return RETURNS;
            }
          case 258: break;
          case 122: 
            { return BOOLEAN;
            }
          case 259: break;
          case 123: 
            { return PRIVATE;
            }
          case 260: break;
          case 124: 
            { return PACKAGE;
            }
          case 261: break;
          case 125: 
            { return VERSION;
            }
          case 262: break;
          case 126: 
            { /*return ENTITY_REF;*/
            }
          case 263: break;
          case 127: 
            { return FUNCTION;
            }
          case 264: break;
          case 128: 
            { return LENGTHOF;
            }
          case 265: break;
          case 129: 
            { return RESOURCE;
            }
          case 266: break;
          case 130: 
            { return ENDPOINT;
            }
          case 267: break;
          case 131: 
            { /*return CHAR_REF;*/
            }
          case 268: break;
          case 132: 
            { return CONNECTOR;
            }
          case 269: break;
          case 133: 
            { return TYPE_PARAMETER;
            }
          case 270: break;
          case 134: 
            { return ANNOTATION;
            }
          case 271: break;
          case 135: 
            { return TRANSFORMER;
            }
          case 272: break;
          case 136: 
            { return TRANSACTION;
            }
          case 273: break;
          case 137: 
            { return CDATA;
            }
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
